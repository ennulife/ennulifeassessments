{"version":3,"file":"js/admin-scores-enhanced.min.js","mappings":"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","sources":["webpack://ennulife-assessments/./assets/js/admin-scores-enhanced.js"],"sourcesContent":["/**\n * ENNU Life Enhanced Admin JavaScript - Bulletproof Edition\n * \n * Bulletproof JavaScript with comprehensive error handling, retry mechanisms,\n * and graceful degradation for zero-issue deployment.\n * \n * @package ENNU_Life\n * @version 23.1.0\n * @author Manus - World's Greatest WordPress Developer\n */\n\n(function($) {\n    'use strict';\n    \n    // Bulletproof namespace\n    window.ENNUAdminEnhanced = window.ENNUAdminEnhanced || {};\n    \n    const ENNU = {\n        // Configuration\n        config: {\n            maxRetries: 3,\n            retryDelay: 1000,\n            requestTimeout: 30000,\n            maxRequestsPerMinute: 10,\n            debugMode: false\n        },\n        \n        // State management\n        state: {\n            requestCount: 0,\n            lastRequestTime: 0,\n            isProcessing: false,\n            retryAttempts: {}\n        },\n        \n        // Error tracking\n        errors: {\n            log: [],\n            maxLogSize: 100\n        },\n        \n        // Initialize the enhanced admin system\n        init: function() {\n            try {\n                this.log('Initializing ENNU Enhanced Admin System');\n                \n                // Check dependencies\n                if (!this.checkDependencies()) {\n                    this.handleError('Dependencies check failed', 'DEPENDENCY_ERROR');\n                    return;\n                }\n                \n                // Load configuration from WordPress\n                this.loadConfig();\n                \n                // Bind event handlers\n                this.bindEvents();\n                \n                // Initialize components\n                this.initializeComponents();\n                \n                // Setup error monitoring\n                this.setupErrorMonitoring();\n                \n                // Setup performance monitoring\n                this.setupPerformanceMonitoring();\n                \n                this.log('ENNU Enhanced Admin System initialized successfully');\n                \n            } catch (error) {\n                this.handleError('Initialization failed: ' + error.message, 'INIT_ERROR', error);\n            }\n        },\n        \n        // Check for required dependencies\n        checkDependencies: function() {\n            const required = ['jQuery', 'ennuAdminEnhanced'];\n            const missing = [];\n            \n            if (typeof $ === 'undefined' || typeof $.fn.jquery === 'undefined') {\n                missing.push('jQuery');\n            }\n            \n            if (typeof ennuAdminEnhanced === 'undefined') {\n                missing.push('ennuAdminEnhanced localization object');\n            }\n            \n            if (missing.length > 0) {\n                this.log('Missing dependencies: ' + missing.join(', '), 'error');\n                return false;\n            }\n            \n            return true;\n        },\n        \n        // Load configuration from WordPress localization\n        loadConfig: function() {\n            if (typeof ennuAdminEnhanced !== 'undefined') {\n                this.config = $.extend(this.config, ennuAdminEnhanced.security || {});\n                this.strings = ennuAdminEnhanced.strings || {};\n                this.ajaxUrl = ennuAdminEnhanced.ajaxurl;\n                this.nonce = ennuAdminEnhanced.nonce;\n            }\n        },\n        \n        // Bind event handlers with error protection\n        bindEvents: function() {\n            try {\n                // Recalculate scores button\n                document.addEventListener('click', (e) => {\n                    if (e.target.id === 'ennu-recalculate-scores') {\n                        this.handleRecalculateScores(e);\n                    } else if (e.target.id === 'ennu-export-data') {\n                        this.handleExportData(e);\n                    } else if (e.target.id === 'ennu-sync-hubspot') {\n                        this.handleSyncHubSpot(e);\n                    } else if (e.target.id === 'ennu-clear-cache') {\n                        this.handleClearCache(e);\n                    } else if (e.target.id === 'ennu-clear-data') {\n                        this.handleClearUserData(e);\n                    }\n                });\n\n                // Global error handler for unhandled promise rejections\n                window.addEventListener('unhandledrejection', this.handleUnhandledRejection.bind(this));\n                \n                // Global error handler for JavaScript errors\n                window.addEventListener('error', this.handleGlobalError.bind(this));\n                \n                this.log('Event handlers bound successfully');\n                \n            } catch (error) {\n                this.handleError('Failed to bind events: ' + error.message, 'BIND_ERROR', error);\n            }\n        },\n        \n        // Initialize components\n        initializeComponents: function() {\n            try {\n                // Initialize tooltips if available\n                if ($.fn.tooltip) {\n                    $('.ennu-enhanced-admin-container [title]').tooltip();\n                }\n                \n                // Initialize progress animations\n                this.animateProgressBars();\n                \n                // Initialize cache status updates\n                this.updateCacheStatus();\n                \n                this.log('Components initialized successfully');\n                \n            } catch (error) {\n                this.handleError('Failed to initialize components: ' + error.message, 'COMPONENT_ERROR', error);\n            }\n        },\n        \n        // Setup error monitoring\n        setupErrorMonitoring: function() {\n            const self = this;\n            \n            // Monitor AJAX errors\n            $(document).ajaxError(function(event, xhr, settings, error) {\n                if (settings.url && settings.url.indexOf('ennu_') !== -1) {\n                    self.handleAjaxError(xhr, 'error', error, settings);\n                }\n            });\n            \n            // Monitor console errors\n            const originalConsoleError = console.error;\n            console.error = function() {\n                self.logError('Console Error', Array.prototype.slice.call(arguments).join(' '));\n                originalConsoleError.apply(console, arguments);\n            };\n        },\n        \n        // Setup performance monitoring\n        setupPerformanceMonitoring: function() {\n            if (window.performance && window.performance.mark) {\n                window.performance.mark('ennu-admin-init-complete');\n            }\n        },\n        \n        // Handle recalculate scores with bulletproof error handling\n        handleRecalculateScores: function(e) {\n            e.preventDefault();\n            \n            try {\n                const $button = $(e.currentTarget);\n                const userId = this.getUserId();\n                \n                if (!userId) {\n                    this.showNotification(this.strings.error || 'User ID not found', 'error');\n                    return;\n                }\n                \n                this.performAjaxOperation('recalculate_scores', {\n                    user_id: userId\n                }, $button, this.strings.recalculating || 'Recalculating scores...');\n                \n            } catch (error) {\n                this.handleError('Recalculate scores failed: ' + error.message, 'RECALCULATE_ERROR', error);\n            }\n        },\n        \n        // Handle export data\n        handleExportData: function(e) {\n            e.preventDefault();\n            \n            try {\n                const $button = $(e.currentTarget);\n                const userId = this.getUserId();\n                \n                if (!userId) {\n                    this.showNotification(this.strings.error || 'User ID not found', 'error');\n                    return;\n                }\n                \n                this.performAjaxOperation('export_user_data', {\n                    user_id: userId\n                }, $button, this.strings.exporting || 'Exporting data...', this.handleExportSuccess.bind(this));\n                \n            } catch (error) {\n                this.handleError('Export data failed: ' + error.message, 'EXPORT_ERROR', error);\n            }\n        },\n        \n        // Handle HubSpot sync\n        handleSyncHubSpot: function(e) {\n            e.preventDefault();\n            \n            try {\n                const $button = $(e.currentTarget);\n                const userId = this.getUserId();\n                \n                if (!userId) {\n                    this.showNotification(this.strings.error || 'User ID not found', 'error');\n                    return;\n                }\n                \n                this.performAjaxOperation('sync_hubspot', {\n                    user_id: userId\n                }, $button, this.strings.syncing || 'Syncing with HubSpot...');\n                \n            } catch (error) {\n                this.handleError('HubSpot sync failed: ' + error.message, 'HUBSPOT_ERROR', error);\n            }\n        },\n        \n        // Handle clear cache\n        handleClearCache: function(e) {\n            e.preventDefault();\n            \n            try {\n                const $button = $(e.currentTarget);\n                const userId = this.getUserId();\n                \n                this.performAjaxOperation('clear_cache', {\n                    user_id: userId || 0\n                }, $button, this.strings.clearing_cache || 'Clearing cache...');\n                \n            } catch (error) {\n                this.handleError('Clear cache failed: ' + error.message, 'CACHE_ERROR', error);\n            }\n        },\n        \n        // Handle clear user data\n        handleClearUserData: function(e) {\n            e.preventDefault();\n\n            if (!confirm(this.strings.confirm_clear || 'Are you sure you want to permanently delete all ENNU assessment data for this user? This cannot be undone.')) {\n                return;\n            }\n\n            try {\n                const $button = $(e.currentTarget);\n                const userId = $button.data('user-id');\n\n                if (!userId) {\n                    this.showNotification(this.strings.error || 'User ID not found', 'error');\n                    return;\n                }\n\n                this.performAjaxOperation('clear_user_data', {\n                    user_id: userId\n                }, $button, 'Clearing data...', function() {\n                    location.reload();\n                });\n\n            } catch (error) {\n                this.handleError('Clear user data failed: ' + error.message, 'CLEAR_DATA_ERROR', error);\n            }\n        },\n\n        // Bulletproof AJAX operation with retry mechanism\n        performAjaxOperation: function(action, data, $button, loadingMessage, successCallback) {\n            if (this.state.isProcessing) {\n                this.showNotification('Another operation is in progress. Please wait.', 'warning');\n                return;\n            }\n            \n            // Rate limiting check\n            if (!this.checkRateLimit()) {\n                this.showNotification(this.strings.rate_limit || 'Too many requests. Please wait a moment.', 'error');\n                return;\n            }\n            \n            this.state.isProcessing = true;\n            \n            // Prepare request data\n            const requestData = $.extend({\n                action: 'ennu_' + action,\n                nonce: this.nonce\n            }, data);\n            \n            // Show loading state\n            this.setButtonLoading($button, true, loadingMessage);\n            this.showNotification(loadingMessage, 'loading');\n            \n            // Perform AJAX request with retry\n            this.ajaxWithRetry(requestData, action)\n                .done((response) => {\n                    this.handleAjaxSuccess(response, $button, successCallback);\n                })\n                .fail((xhr, status, error) => {\n                    this.handleAjaxError(xhr, status, error, { data: requestData });\n                    this.setButtonLoading($button, false);\n                })\n                .always(() => {\n                    this.state.isProcessing = false;\n                });\n        },\n        \n        // AJAX with retry mechanism\n        ajaxWithRetry: function(data, action, attempt) {\n            attempt = attempt || 1;\n            const self = this;\n            \n            return fetch(this.ajaxUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: new URLSearchParams(data)\n            }).then(response => {\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                return response.json();\n            }).catch(error => {\n                if (attempt < self.config.maxRetries && self.shouldRetry(error)) {\n                    self.log(`Retrying AJAX request for ${action} (attempt ${attempt + 1}/${self.config.maxRetries})`);\n                    \n                    // Exponential backoff\n                    const delay = self.config.retryDelay * Math.pow(2, attempt - 1);\n                    \n                    return new Promise((resolve, reject) => {\n                        setTimeout(() => {\n                            self.ajaxWithRetry(data, action, attempt + 1)\n                                .done(resolve)\n                                .fail(reject);\n                        }, delay);\n                    });\n                } else {\n                    return Promise.reject({ xhr, status, error });\n                }\n            });\n        },\n        \n        // Determine if request should be retried\n        shouldRetry: function(xhr, status) {\n            // Retry on network errors, timeouts, and 5xx server errors\n            return status === 'timeout' || \n                   status === 'error' || \n                   xhr.status === 0 || \n                   (xhr.status >= 500 && xhr.status < 600);\n        },\n        \n        // Handle AJAX success\n        handleAjaxSuccess: function(response, $button, successCallback) {\n            try {\n                this.setButtonLoading($button, false);\n                \n                if (response.success) {\n                    this.showNotification(response.data.message || this.strings.success || 'Operation completed successfully!', 'success');\n                    \n                    if (successCallback && typeof successCallback === 'function') {\n                        successCallback(response.data);\n                    }\n                    \n                    // Refresh page data if needed\n                    this.refreshPageData();\n                    \n                } else {\n                    const errorMessage = response.data && response.data.message ? \n                        response.data.message : \n                        (this.strings.error || 'An error occurred. Please try again.');\n                    \n                    this.showNotification(errorMessage, 'error');\n                }\n                \n            } catch (error) {\n                this.handleError('Success handler failed: ' + error.message, 'SUCCESS_HANDLER_ERROR', error);\n            }\n        },\n        \n        // Handle AJAX errors with comprehensive error analysis\n        handleAjaxError: function(xhr, status, error, settings) {\n            try {\n                let message = this.strings.error || 'An error occurred. Please try again.';\n                \n                // Analyze error type\n                if (xhr.status === 0) {\n                    message = this.strings.network_error || 'Network error. Please check your connection.';\n                } else if (xhr.status === 403) {\n                    message = this.strings.permission_denied || 'Permission denied. Please refresh the page and try again.';\n                } else if (xhr.status === 429) {\n                    message = this.strings.rate_limit || 'Too many requests. Please wait a moment and try again.';\n                } else if (xhr.status >= 500) {\n                    message = 'Server error. Please try again later.';\n                } else if (status === 'timeout') {\n                    message = 'Request timed out. Please try again.';\n                } else if (xhr.responseJSON && xhr.responseJSON.data && xhr.responseJSON.data.message) {\n                    message = xhr.responseJSON.data.message;\n                }\n                \n                this.showNotification(message, 'error');\n                \n                // Log error for debugging\n                this.logError('AJAX Error', {\n                    status: xhr.status,\n                    statusText: status,\n                    error: error,\n                    url: settings ? settings.url : 'unknown',\n                    response: xhr.responseText\n                });\n                \n                // Send error to server for logging\n                this.sendErrorToServer({\n                    type: 'ajax_error',\n                    status: xhr.status,\n                    statusText: status,\n                    error: error,\n                    url: settings ? settings.url : 'unknown',\n                    timestamp: new Date().toISOString()\n                });\n                \n            } catch (handlerError) {\n                this.handleError('Error handler failed: ' + handlerError.message, 'ERROR_HANDLER_ERROR', handlerError);\n            }\n        },\n        \n        // Handle export success with file download\n        handleExportSuccess: function(data) {\n            try {\n                if (data && data.data) {\n                    const exportData = JSON.stringify(data.data, null, 2);\n                    const blob = new Blob([exportData], { type: 'application/json' });\n                    const url = window.URL.createObjectURL(blob);\n                    \n                    const a = document.createElement('a');\n                    a.href = url;\n                    a.download = `ennu-user-data-${data.data._metadata.user_id}-${new Date().toISOString().split('T')[0]}.json`;\n                    document.body.appendChild(a);\n                    a.click();\n                    document.body.removeChild(a);\n                    window.URL.revokeObjectURL(url);\n                }\n            } catch (error) {\n                this.handleError('Export file creation failed: ' + error.message, 'EXPORT_FILE_ERROR', error);\n            }\n        },\n        \n        // Rate limiting check\n        checkRateLimit: function() {\n            const now = Date.now();\n            const oneMinute = 60 * 1000;\n            \n            // Reset counter if more than a minute has passed\n            if (now - this.state.lastRequestTime > oneMinute) {\n                this.state.requestCount = 0;\n            }\n            \n            // Check if limit exceeded\n            if (this.state.requestCount >= this.config.maxRequestsPerMinute) {\n                return false;\n            }\n            \n            // Update counters\n            this.state.requestCount++;\n            this.state.lastRequestTime = now;\n            \n            return true;\n        },\n        \n        // Set button loading state\n        setButtonLoading: function($button, loading, message) {\n            if (loading) {\n                $button.prop('disabled', true)\n                       .addClass('ennu-loading')\n                       .data('original-text', $button.text())\n                       .html('<span class=\"dashicons dashicons-update-alt\"></span> ' + (message || 'Loading...'));\n            } else {\n                $button.prop('disabled', false)\n                       .removeClass('ennu-loading')\n                       .html($button.data('original-text') || $button.text());\n            }\n        },\n        \n        // Show notification with auto-hide\n        showNotification: function(message, type, duration) {\n            try {\n                const $status = $('#ennu-operation-status');\n                \n                if ($status.length === 0) {\n                    return;\n                }\n                \n                duration = duration || (type === 'error' ? 8000 : 4000);\n                \n                // Clear existing classes and hide\n                $status.removeClass('show loading success error warning')\n                       .addClass('show ' + type)\n                       .html(this.getNotificationIcon(type) + ' ' + message);\n                \n                // Auto-hide after duration\n                if (type !== 'loading') {\n                    setTimeout(() => {\n                        $status.removeClass('show');\n                    }, duration);\n                }\n                \n            } catch (error) {\n                // Fallback to console if notification system fails\n            }\n        },\n        \n        // Get notification icon\n        getNotificationIcon: function(type) {\n            const icons = {\n                loading: '<span class=\"dashicons dashicons-update-alt\"></span>',\n                success: '<span class=\"dashicons dashicons-yes-alt\"></span>',\n                error: '<span class=\"dashicons dashicons-warning\"></span>',\n                warning: '<span class=\"dashicons dashicons-info\"></span>'\n            };\n            \n            return icons[type] || '';\n        },\n        \n        // Animate progress bars\n        animateProgressBars: function() {\n            try {\n                $('.ennu-progress-bar').each(function() {\n                    const $bar = $(this);\n                    const width = $bar.css('width');\n                    $bar.css('width', '0').animate({ width: width }, 1000);\n                });\n            } catch (error) {\n                this.log('Progress bar animation failed: ' + error.message, 'warning');\n            }\n        },\n        \n        // Update cache status\n        updateCacheStatus: function() {\n            try {\n                // This would typically make an AJAX call to get current cache status\n                // For now, we'll just update the display based on existing data\n                const $indicator = $('.ennu-cache-indicator');\n                if ($indicator.hasClass('active')) {\n                    $indicator.addClass('pulse');\n                }\n            } catch (error) {\n                this.log('Cache status update failed: ' + error.message, 'warning');\n            }\n        },\n        \n        // Refresh page data\n        refreshPageData: function() {\n            try {\n                // Refresh cache status\n                this.updateCacheStatus();\n                \n                // Refresh any dynamic content\n                // This could trigger a partial page refresh if needed\n                \n            } catch (error) {\n                this.log('Page data refresh failed: ' + error.message, 'warning');\n            }\n        },\n        \n        // Get user ID from page\n        getUserId: function() {\n            // Try multiple methods to get user ID\n            const urlParams = new URLSearchParams(window.location.search);\n            let userId = urlParams.get('user_id');\n            \n            if (!userId) {\n                const match = window.location.pathname.match(/user-edit\\.php.*user_id=(\\d+)/);\n                if (match) {\n                    userId = match[1];\n                }\n            }\n            \n            if (!userId) {\n                const $userIdField = $('#user_id');\n                if ($userIdField.length) {\n                    userId = $userIdField.val();\n                }\n            }\n            \n            return userId ? parseInt(userId, 10) : null;\n        },\n        \n        // Error handling and logging\n        handleError: function(message, code, error) {\n            this.logError(code || 'GENERAL_ERROR', message, error);\n            \n            // Show user-friendly error message\n            this.showNotification(\n                'A system error occurred. Please refresh the page and try again.',\n                'error'\n            );\n        },\n        \n        // Log error with details\n        logError: function(type, message, error) {\n            const errorEntry = {\n                timestamp: new Date().toISOString(),\n                type: type,\n                message: message,\n                error: error ? error.toString() : null,\n                stack: error ? error.stack : null,\n                userAgent: navigator.userAgent,\n                url: window.location.href\n            };\n            \n            // Add to local error log\n            this.errors.log.push(errorEntry);\n            \n            // Keep log size manageable\n            if (this.errors.log.length > this.errors.maxLogSize) {\n                this.errors.log = this.errors.log.slice(-this.errors.maxLogSize);\n            }\n            \n            // Log to console in debug mode\n            if (this.config.debugMode) {\n                console.error('ENNU Error:', errorEntry);\n            }\n        },\n        \n        // Send error to server for logging\n        sendErrorToServer: function(errorData) {\n            try {\n                // Don't send too many error reports\n                if (this.errors.log.length > 10) {\n                    return;\n                }\n                \n                fetch(this.ajaxUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded',\n                    },\n                    body: new URLSearchParams({\n                        action: 'ennu_log_client_error',\n                        nonce: this.nonce,\n                        error_data: JSON.stringify(errorData)\n                    })\n                }).catch(() => {\n                    // Silently fail - don't create error loops\n                });\n                \n            } catch (error) {\n                // Silently fail - don't create error loops\n            }\n        },\n        \n        // Handle unhandled promise rejections\n        handleUnhandledRejection: function(event) {\n            this.logError('UNHANDLED_PROMISE_REJECTION', event.reason);\n        },\n        \n        // Handle global JavaScript errors\n        handleGlobalError: function(event) {\n            this.logError('GLOBAL_ERROR', event.message, {\n                filename: event.filename,\n                lineno: event.lineno,\n                colno: event.colno\n            });\n        },\n        \n        // Logging utility\n        log: function(message, level) {\n            level = level || 'info';\n            \n            if (this.config.debugMode || level === 'error') {\n                console[level]('ENNU Admin:', message);\n            }\n        },\n        \n        // Get error log for debugging\n        getErrorLog: function() {\n            return this.errors.log;\n        },\n        \n        // Clear error log\n        clearErrorLog: function() {\n            this.errors.log = [];\n        }\n    };\n    \n    // Initialize when document is ready\n    $(document).ready(function() {\n        ENNU.init();\n    });\n    \n    // Expose ENNU object globally for debugging\n    window.ENNUAdminEnhanced = ENNU;\n    \n})(jQuery);\n\n"],"names":["$","window","ENNUAdminEnhanced","ENNU","config","maxRetries","retryDelay","requestTimeout","maxRequestsPerMinute","debugMode","state","requestCount","lastRequestTime","isProcessing","retryAttempts","errors","log","maxLogSize","init","this","checkDependencies","handleError","loadConfig","bindEvents","initializeComponents","setupErrorMonitoring","setupPerformanceMonitoring","error","message","missing","fn","jquery","push","ennuAdminEnhanced","length","join","extend","security","strings","ajaxUrl","ajaxurl","nonce","_this","document","addEventListener","e","target","id","handleRecalculateScores","handleExportData","handleSyncHubSpot","handleClearCache","handleClearUserData","handleUnhandledRejection","bind","handleGlobalError","tooltip","animateProgressBars","updateCacheStatus","self","ajaxError","event","xhr","settings","url","indexOf","handleAjaxError","originalConsoleError","console","logError","Array","prototype","slice","call","arguments","apply","performance","mark","preventDefault","$button","currentTarget","userId","getUserId","showNotification","performAjaxOperation","user_id","recalculating","exporting","handleExportSuccess","syncing","clearing_cache","confirm","confirm_clear","data","location","reload","action","loadingMessage","successCallback","_this2","checkRateLimit","requestData","setButtonLoading","ajaxWithRetry","done","response","handleAjaxSuccess","fail","status","always","rate_limit","attempt","fetch","method","headers","body","URLSearchParams","then","ok","Error","concat","json","shouldRetry","delay","Math","pow","Promise","resolve","reject","setTimeout","success","refreshPageData","errorMessage","network_error","permission_denied","responseJSON","statusText","responseText","sendErrorToServer","type","timestamp","Date","toISOString","handlerError","exportData","JSON","stringify","blob","Blob","URL","createObjectURL","a","createElement","href","download","_metadata","split","appendChild","click","removeChild","revokeObjectURL","now","loading","prop","addClass","text","html","removeClass","duration","$status","getNotificationIcon","warning","each","$bar","width","css","animate","$indicator","hasClass","search","get","match","pathname","$userIdField","val","parseInt","code","errorEntry","toString","stack","userAgent","navigator","errorData","error_data","reason","filename","lineno","colno","level","getErrorLog","clearErrorLog","ready","jQuery"],"sourceRoot":""}