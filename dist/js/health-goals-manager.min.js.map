{"version":3,"file":"js/health-goals-manager.min.js","mappings":"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","sources":["webpack://ennulife-assessments/./assets/js/health-goals-manager.js"],"sourcesContent":["/**\n * Health Goals Interactive Manager\n * Handles user interactions with health goal pills and AJAX updates\n *\n * @package ENNU_Life\n * @version 62.1.67\n * @author The World's Greatest WordPress Developer\n */\n\nclass HealthGoalsManager {\n    constructor() {\n        this.originalGoals = new Set();\n        this.currentGoals = new Set();\n        this.updateButton = null;\n        this.notificationSystem = new NotificationSystem();\n        this.isUpdating = false;\n        \n        this.init();\n    }\n    \n    init() {\n        // Wait for DOM to be ready\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => this.initialize());\n        } else {\n            this.initialize();\n        }\n    }\n    \n    initialize() {\n        this.cacheOriginalGoals();\n        this.setupEventListeners();\n        this.createUpdateButton();\n        this.addGoalAttributes();\n        \n        console.log('ENNU Health Goals Manager: Initialized with', this.originalGoals.size, 'original goals');\n    }\n    \n    /**\n     * Cache original goals for change detection\n     */\n    cacheOriginalGoals() {\n        document.querySelectorAll('.goal-pill.selected').forEach(pill => {\n            const goalId = this.extractGoalId(pill);\n            if (goalId) {\n                this.originalGoals.add(goalId);\n                this.currentGoals.add(goalId);\n            }\n        });\n    }\n    \n    /**\n     * Extract goal ID from pill element\n     */\n    extractGoalId(pill) {\n        // Try multiple methods to get goal ID\n        if (pill.dataset.goalId) {\n            return pill.dataset.goalId;\n        }\n        \n        // Extract from text content as fallback\n        const goalText = pill.querySelector('.goal-pill-text');\n        if (goalText) {\n            const text = goalText.textContent.trim().toLowerCase();\n            return this.textToGoalId(text);\n        }\n        \n        return null;\n    }\n    \n    /**\n     * Convert goal text to goal ID\n     */\n    textToGoalId(text) {\n        const goalMap = {\n            'weight loss': 'weight_loss',\n            'muscle gain': 'strength', \n            'energy boost': 'energy',\n            'better sleep': 'sleep',\n            'stress reduction': 'stress',\n            'skin improvement': 'aesthetics',\n            'hair health': 'aesthetics',\n            'hormone balance': 'hormonal_balance',\n            'sexual health': 'libido',\n            'menopause support': 'hormonal_balance',\n            'immune boost': 'longevity',\n            'cognitive function': 'cognitive_health',\n            'longevity & healthy aging': 'longevity',\n            'improve energy & vitality': 'energy',\n            'build strength & muscle': 'strength',\n            'enhance libido & sexual health': 'libido',\n            'achieve & maintain healthy weight': 'weight_loss',\n            'hormonal balance': 'hormonal_balance',\n            'sharpen cognitive function': 'cognitive_health',\n            'support heart health': 'heart_health',\n            'improve hair, skin & nails': 'aesthetics',\n            'improve sleep quality': 'sleep',\n            'reduce stress & improve resilience': 'stress'\n        };\n        \n        return goalMap[text] || text.replace(/[^a-z]/g, '_');\n    }\n    \n    /**\n     * Add goal ID attributes to pills\n     */\n    addGoalAttributes() {\n        document.querySelectorAll('.goal-pill').forEach(pill => {\n            if (!pill.dataset.goalId) {\n                const goalId = this.extractGoalId(pill);\n                if (goalId) {\n                    pill.dataset.goalId = goalId;\n                }\n            }\n        });\n    }\n    \n    /**\n     * Setup event listeners for goal pills\n     */\n    setupEventListeners() {\n        // Use event delegation for dynamic content\n        document.addEventListener('click', (e) => {\n            if (e.target.classList.contains('goal-pill') || e.target.closest('.goal-pill')) {\n                const pill = e.target.classList.contains('goal-pill') ? e.target : e.target.closest('.goal-pill');\n                this.handleGoalPillClick(pill, e);\n            }\n            \n            if (e.target.classList.contains('update-goals-button')) {\n                e.preventDefault();\n                this.handleUpdateGoalsClick();\n            }\n        });\n        \n        // Keyboard accessibility\n        document.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter' || e.key === ' ') {\n                if (e.target.classList.contains('goal-pill')) {\n                    e.preventDefault();\n                    this.handleGoalPillClick(e.target, e);\n                }\n                \n                if (e.target.classList.contains('update-goals-button')) {\n                    e.preventDefault();\n                    this.handleUpdateGoalsClick();\n                }\n            }\n        });\n    }\n    \n    /**\n     * Handle individual goal pill clicks\n     */\n    handleGoalPillClick(pill, event) {\n        if (this.isUpdating) {\n            return; // Prevent interactions during updates\n        }\n        \n        const goalId = pill.dataset.goalId;\n        if (!goalId) {\n            console.warn('ENNU Health Goals: No goal ID found for pill', pill);\n            return;\n        }\n        \n        const isCurrentlySelected = pill.classList.contains('selected');\n        \n        // Toggle visual state immediately for responsive feel\n        pill.classList.toggle('selected');\n        pill.classList.add('changed');\n        \n        // Update current goals set\n        if (isCurrentlySelected) {\n            this.currentGoals.delete(goalId);\n        } else {\n            this.currentGoals.add(goalId);\n        }\n        \n        // Check if changes exist\n        this.checkForChanges();\n        \n        // Add visual feedback\n        this.addPillFeedback(pill);\n        \n        console.log('ENNU Health Goals: Toggled goal', goalId, 'to', !isCurrentlySelected);\n    }\n    \n    /**\n     * Add visual feedback to pill interaction\n     */\n    addPillFeedback(pill) {\n        pill.style.transform = 'scale(1.05)';\n        pill.style.transition = 'transform 0.1s ease';\n        \n        setTimeout(() => {\n            pill.style.transform = 'scale(1)';\n        }, 100);\n        \n        // Add ripple effect\n        this.createRippleEffect(pill);\n    }\n    \n    /**\n     * Create ripple effect on pill click\n     */\n    createRippleEffect(pill) {\n        const ripple = document.createElement('span');\n        ripple.className = 'goal-pill-ripple';\n        \n        const rect = pill.getBoundingClientRect();\n        const size = Math.max(rect.width, rect.height);\n        \n        ripple.style.width = ripple.style.height = size + 'px';\n        ripple.style.left = '50%';\n        ripple.style.top = '50%';\n        ripple.style.transform = 'translate(-50%, -50%) scale(0)';\n        \n        pill.style.position = 'relative';\n        pill.appendChild(ripple);\n        \n        // Animate ripple\n        requestAnimationFrame(() => {\n            ripple.style.transform = 'translate(-50%, -50%) scale(1)';\n            ripple.style.opacity = '0';\n        });\n        \n        // Remove ripple after animation\n        setTimeout(() => {\n            if (ripple.parentNode) {\n                ripple.parentNode.removeChild(ripple);\n            }\n        }, 300);\n    }\n    \n    /**\n     * Check for changes and show/hide update button\n     */\n    checkForChanges() {\n        const hasChanges = !this.setsEqual(this.originalGoals, this.currentGoals);\n        \n        if (hasChanges) {\n            this.showUpdateButton();\n        } else {\n            this.hideUpdateButton();\n            this.clearChangedIndicators();\n        }\n    }\n    \n    /**\n     * Compare two sets for equality\n     */\n    setsEqual(set1, set2) {\n        if (set1.size !== set2.size) return false;\n        return [...set1].every(x => set2.has(x));\n    }\n    \n    /**\n     * Create and inject update button\n     */\n    createUpdateButton() {\n        this.updateButton = document.createElement('button');\n        this.updateButton.className = 'update-goals-button';\n        this.updateButton.setAttribute('type', 'button');\n        this.updateButton.setAttribute('tabindex', '0');\n        this.updateButton.setAttribute('aria-label', 'Update your health goals');\n        this.updateButton.innerHTML = `\n            <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" width=\"16\" height=\"16\" aria-hidden=\"true\">\n                <path d=\"M20 6L9 17l-5-5\"/>\n            </svg>\n            <span>Update My Health Goals</span>\n        `;\n        this.updateButton.style.display = 'none';\n        \n        // Insert after health goals grid\n        const goalsGrid = document.querySelector('.health-goals-grid');\n        if (goalsGrid && goalsGrid.parentNode) {\n            goalsGrid.parentNode.insertBefore(this.updateButton, goalsGrid.nextSibling);\n        }\n    }\n    \n    /**\n     * Show update button with animation\n     */\n    showUpdateButton() {\n        if (this.updateButton) {\n            this.updateButton.style.display = 'flex';\n            this.updateButton.style.opacity = '0';\n            this.updateButton.style.transform = 'translateY(10px)';\n            \n            requestAnimationFrame(() => {\n                this.updateButton.style.transition = 'all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1)';\n                this.updateButton.style.opacity = '1';\n                this.updateButton.style.transform = 'translateY(0)';\n            });\n        }\n    }\n    \n    /**\n     * Hide update button with animation\n     */\n    hideUpdateButton() {\n        if (this.updateButton) {\n            this.updateButton.style.transition = 'all 0.3s ease';\n            this.updateButton.style.opacity = '0';\n            this.updateButton.style.transform = 'translateY(10px)';\n            \n            setTimeout(() => {\n                this.updateButton.style.display = 'none';\n            }, 300);\n        }\n    }\n    \n    /**\n     * Clear changed indicators from all pills\n     */\n    clearChangedIndicators() {\n        document.querySelectorAll('.goal-pill.changed').forEach(pill => {\n            pill.classList.remove('changed');\n        });\n    }\n    \n    /**\n     * Handle update goals button click\n     */\n    handleUpdateGoalsClick() {\n        if (this.isUpdating) {\n            return; // Prevent double clicks\n        }\n        \n        this.isUpdating = true;\n        const goalsArray = Array.from(this.currentGoals);\n        \n        console.log('ENNU Health Goals: Updating goals to:', goalsArray);\n        \n        // Show loading state\n        this.setUpdateButtonLoading(true);\n        \n        // Prepare form data\n        const formData = new FormData();\n        formData.append('action', 'ennu_update_health_goals');\n        \n        // Check if AJAX data is available\n        if (typeof ennuHealthGoalsAjax !== 'undefined') {\n            formData.append('nonce', ennuHealthGoalsAjax.nonce);\n            \n            // Add each goal as separate form field\n            goalsArray.forEach(goal => {\n                formData.append('health_goals[]', goal);\n            });\n            \n            // Send AJAX request\n            fetch(ennuHealthGoalsAjax.ajax_url, {\n                method: 'POST',\n                body: formData\n            })\n            .then(response => response.json())\n            .then(data => {\n                this.isUpdating = false;\n                this.setUpdateButtonLoading(false);\n                \n                if (data.success) {\n                    this.handleUpdateSuccess(data.data);\n                } else {\n                    this.handleUpdateError(data.data);\n                }\n            })\n            .catch(error => {\n                this.isUpdating = false;\n                this.setUpdateButtonLoading(false);\n                console.error('ENNU Health Goals: Network error:', error);\n                this.handleUpdateError({ \n                    message: ennuHealthGoalsAjax?.messages?.network_error || 'Network error occurred' \n                });\n            });\n        } else {\n            // Fallback if AJAX data not available\n            this.isUpdating = false;\n            this.setUpdateButtonLoading(false);\n            this.notificationSystem.show(\n                'Unable to update goals: AJAX configuration missing',\n                'error'\n            );\n            console.error('ENNU Health Goals: ennuHealthGoalsAjax not defined');\n        }\n    }\n    \n    /**\n     * Set loading state on update button\n     */\n    setUpdateButtonLoading(isLoading) {\n        if (!this.updateButton) return;\n        \n        if (isLoading) {\n            this.updateButton.disabled = true;\n            this.updateButton.innerHTML = `\n                <div class=\"loading-spinner\" aria-hidden=\"true\"></div>\n                <span>${ennuHealthGoalsAjax?.messages?.updating || 'Updating Goals...'}</span>\n            `;\n            this.updateButton.classList.add('loading');\n        } else {\n            this.updateButton.disabled = false;\n            this.updateButton.innerHTML = `\n                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" width=\"16\" height=\"16\" aria-hidden=\"true\">\n                    <path d=\"M20 6L9 17l-5-5\"/>\n                </svg>\n                <span>Update My Health Goals</span>\n            `;\n            this.updateButton.classList.remove('loading');\n        }\n    }\n    \n    /**\n     * Handle successful update\n     */\n    handleUpdateSuccess(data) {\n        const message = data.message || ennuHealthGoalsAjax?.messages?.success || 'Goals updated successfully!';\n        this.notificationSystem.show(message, 'success');\n        \n        // Update original goals to match current\n        this.originalGoals = new Set(this.currentGoals);\n        \n        // Hide update button and clear indicators\n        this.hideUpdateButton();\n        this.clearChangedIndicators();\n        \n        console.log('ENNU Health Goals: Successfully updated to:', data.goals);\n        \n        // Refresh page if needed for score update\n        if (data.redirect_needed) {\n            this.notificationSystem.show(\n                'Refreshing page to update your scores...', \n                'info',\n                1500\n            );\n            \n            setTimeout(() => {\n                window.location.reload();\n            }, 2000);\n        }\n    }\n    \n    /**\n     * Handle update error\n     */\n    handleUpdateError(data) {\n        const message = data?.message || ennuHealthGoalsAjax?.messages?.error || 'Failed to update health goals';\n        this.notificationSystem.show(message, 'error');\n        \n        console.error('ENNU Health Goals: Update failed:', data);\n        \n        // Revert visual changes\n        this.revertVisualChanges();\n    }\n    \n    /**\n     * Revert visual changes on error\n     */\n    revertVisualChanges() {\n        // Reset current goals to original\n        this.currentGoals = new Set(this.originalGoals);\n        \n        // Update pill visual states\n        document.querySelectorAll('.goal-pill').forEach(pill => {\n            const goalId = pill.dataset.goalId;\n            if (goalId) {\n                const shouldBeSelected = this.originalGoals.has(goalId);\n                pill.classList.toggle('selected', shouldBeSelected);\n                pill.classList.remove('changed');\n            }\n        });\n        \n        // Hide update button\n        this.hideUpdateButton();\n    }\n}\n\n/**\n * Notification System for user feedback\n */\nclass NotificationSystem {\n    constructor() {\n        this.container = this.createContainer();\n        this.notifications = new Map();\n        this.nextId = 1;\n    }\n    \n    createContainer() {\n        let container = document.querySelector('.ennu-notifications-container');\n        if (!container) {\n            container = document.createElement('div');\n            container.className = 'ennu-notifications-container';\n            container.setAttribute('aria-live', 'polite');\n            container.setAttribute('aria-label', 'Notifications');\n            document.body.appendChild(container);\n        }\n        return container;\n    }\n    \n    show(message, type = 'info', duration = 3000) {\n        const id = this.nextId++;\n        const notification = this.createNotification(id, message, type);\n        \n        // Add to container\n        this.container.appendChild(notification);\n        this.notifications.set(id, notification);\n        \n        // Trigger show animation\n        requestAnimationFrame(() => {\n            notification.classList.add('show');\n        });\n        \n        // Auto-hide after duration\n        setTimeout(() => {\n            this.hide(id);\n        }, duration);\n        \n        // Focus management for accessibility\n        if (type === 'error') {\n            notification.focus();\n        }\n        \n        return id;\n    }\n    \n    createNotification(id, message, type) {\n        const notification = document.createElement('div');\n        notification.className = `ennu-notification ennu-notification-${type}`;\n        notification.setAttribute('role', type === 'error' ? 'alert' : 'status');\n        notification.setAttribute('tabindex', '-1');\n        notification.innerHTML = `\n            <div class=\"notification-content\">\n                <div class=\"notification-icon\" aria-hidden=\"true\">\n                    ${this.getIcon(type)}\n                </div>\n                <div class=\"notification-message\">${this.escapeHtml(message)}</div>\n                <button class=\"notification-close\" aria-label=\"Close notification\" type=\"button\">\n                    <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" width=\"16\" height=\"16\" aria-hidden=\"true\">\n                        <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n                        <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n                    </svg>\n                </button>\n            </div>\n        `;\n        \n        // Add event listener for close button\n        const closeBtn = notification.querySelector('.notification-close');\n        closeBtn.addEventListener('click', () => this.hide(id));\n        \n        // Add keyboard support\n        notification.addEventListener('keydown', (e) => {\n            if (e.key === 'Escape') {\n                this.hide(id);\n            }\n        });\n        \n        return notification;\n    }\n    \n    hide(id) {\n        const notification = this.notifications.get(id);\n        if (!notification) return;\n        \n        notification.classList.remove('show');\n        notification.classList.add('hiding');\n        \n        setTimeout(() => {\n            if (notification.parentNode) {\n                notification.parentNode.removeChild(notification);\n            }\n            this.notifications.delete(id);\n        }, 300);\n    }\n    \n    hideAll() {\n        this.notifications.forEach((notification, id) => {\n            this.hide(id);\n        });\n    }\n    \n    getIcon(type) {\n        const icons = {\n            success: '<svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><path d=\"M20 6L9 17l-5-5\"/></svg>',\n            error: '<svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><circle cx=\"12\" cy=\"12\" r=\"10\"/><line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"/><line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"/></svg>',\n            warning: '<svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"/><line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"/><line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"/></svg>',\n            info: '<svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\"><circle cx=\"12\" cy=\"12\" r=\"10\"/><path d=\"M12 16v-4\"/><path d=\"M12 8h.01\"/></svg>'\n        };\n        return icons[type] || icons.info;\n    }\n    \n    escapeHtml(text) {\n        const div = document.createElement('div');\n        div.textContent = text;\n        return div.innerHTML;\n    }\n}\n\n// Initialize when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (document.querySelector('.health-goals-grid')) {\n        console.log('ENNU Health Goals: Initializing manager...');\n        window.ennuHealthGoalsManager = new HealthGoalsManager();\n    }\n}); "],"names":["HealthGoalsManager","_createClass","_classCallCheck","this","originalGoals","Set","currentGoals","updateButton","notificationSystem","NotificationSystem","isUpdating","init","key","value","_this","document","readyState","addEventListener","initialize","cacheOriginalGoals","setupEventListeners","createUpdateButton","addGoalAttributes","_this2","querySelectorAll","forEach","pill","goalId","extractGoalId","add","dataset","goalText","querySelector","text","textContent","trim","toLowerCase","textToGoalId","replace","_this3","_this4","e","target","classList","contains","closest","handleGoalPillClick","preventDefault","handleUpdateGoalsClick","event","isCurrentlySelected","toggle","checkForChanges","addPillFeedback","style","transform","transition","setTimeout","createRippleEffect","ripple","createElement","className","rect","getBoundingClientRect","size","Math","max","width","height","left","top","position","appendChild","requestAnimationFrame","opacity","parentNode","removeChild","setsEqual","showUpdateButton","hideUpdateButton","clearChangedIndicators","set1","set2","_toConsumableArray","every","x","has","setAttribute","innerHTML","display","goalsGrid","insertBefore","nextSibling","_this5","_this6","remove","_this7","goalsArray","Array","from","setUpdateButtonLoading","formData","FormData","append","ennuHealthGoalsAjax","nonce","goal","fetch","ajax_url","method","body","then","response","json","data","success","handleUpdateSuccess","handleUpdateError","error","_ennuHealthGoalsAjax","message","messages","network_error","show","isLoading","_ennuHealthGoalsAjax2","disabled","concat","updating","_ennuHealthGoalsAjax3","redirect_needed","window","location","reload","_ennuHealthGoalsAjax4","revertVisualChanges","_this8","shouldBeSelected","container","createContainer","notifications","Map","nextId","_this9","type","arguments","length","undefined","duration","id","notification","createNotification","set","hide","focus","_this0","getIcon","escapeHtml","_this1","get","_this10","icons","warning","info","div","ennuHealthGoalsManager"],"sourceRoot":""}