{"version":3,"file":"js/user-dashboard.min.js","mappings":"s5BAaAA,OAAOC,WAAa,CAEnBC,cAAe,SAASC,GAAyB,IAAlBC,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KACpCG,EAAYC,SAASC,cAAc,wBACrCF,GAAaA,EAAUG,eAC1BH,EAAUG,cAAcC,aAAa,QAAST,EAAOC,EAEvD,EAGAS,YAAa,SAASV,GAAyB,IAAlBC,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAClCG,EAAYC,SAASC,cAAc,wBACrCF,GAAaA,EAAUG,eAC1BH,EAAUG,cAAcC,aAAa,MAAOT,EAAOC,EAErD,EAGAU,cAAe,WACd,IAAMN,EAAYC,SAASC,cAAc,wBACrCF,GAAaA,EAAUG,eAC1BH,EAAUG,cAAcI,cAE1B,EAGAC,mBAAoB,WACnB,IAAMR,EAAYC,SAASC,cAAc,wBACrCF,GAAaA,EAAUG,eAC1BH,EAAUG,cAAcK,oBAE1B,GAID,IAAIC,GAAuB,EAE3BR,SAASS,iBAAiB,mBAAoB,WAI1C,IAAID,EAAJ,CAYA,IAAME,EAAcV,SAASC,cAAc,wBAC3C,GAAIS,EAAa,CAKb,GAD2BA,EAAYT,cAAc,mCAIjD,OAIAS,EAAYR,eAEZQ,EAAYR,cAAcS,UAG9B,IAAIC,EAAcF,GAClBF,GAAuB,CAC3B,CAMyB,IAAIK,CAnC7B,CAoCJ,GAIA,IA+UUC,EA3UJD,EAAkB,WASnB,OAAAE,EARD,SAAAF,IAAcG,EAAA,KAAAH,GAEVI,KAAKC,UAAY,qBACjBD,KAAKE,aAAe,KACpBF,KAAKG,SAAW,GAChBH,KAAKI,YAAc,GAEnBJ,KAAKK,MACT,EAAC,EAAAC,IAAA,OAAA7B,MAED,WAAO,IAAA8B,EAAA,KAGyB,YAAxBxB,SAASyB,WAETzB,SAASS,iBAAiB,mBAAoB,kBAAMe,EAAKE,YAAY,GAGrET,KAAKS,YAEb,GAAC,CAAAH,IAAA,aAAA7B,MAED,WAEIuB,KAAKE,aAAenB,SAASC,cAAc,kBAEtCgB,KAAKE,eAOVF,KAAKG,SAAWH,KAAKE,aAAaQ,iBAAiB,uBACnDV,KAAKI,YAAcJ,KAAKE,aAAaQ,iBAAiB,yBAIzB,IAAzBV,KAAKG,SAASvB,QAA4C,IAA5BoB,KAAKI,YAAYxB,SAKnDoB,KAAKW,sBACLX,KAAKY,6BAGLZ,KAAKa,oBAET,GAAC,CAAAP,IAAA,mBAAA7B,MAED,WAGIuB,KAAKI,YAAYU,QAAQ,SAAAC,GACrBA,EAAQC,UAAUC,OAAO,uBACzBF,EAAQlB,MAAMqB,QAAU,OACxBH,EAAQlB,MAAMsB,QAAU,IACxBJ,EAAQlB,MAAMuB,UAAY,kBAC9B,GAGApB,KAAKG,SAASW,QAAQ,SAAAO,GAClBA,EAAKL,UAAUC,OAAO,sBAC1B,GAGA,IAAMK,EAAkB,qBAClBC,EAAiBvB,KAAKE,aAAalB,cAAc,WAADwC,OAAYF,EAAe,OAC3EG,EAAoB1C,SAASC,cAAcsC,GAMjD,GAAIC,GAAkBE,EAClBF,EAAeP,UAAUU,IAAI,uBAC7BD,EAAkBT,UAAUU,IAAI,uBAChCD,EAAkB5B,MAAMqB,QAAU,QAGlCS,WAAW,WACPF,EAAkB5B,MAAMsB,QAAU,IAClCM,EAAkB5B,MAAMuB,UAAY,eACxC,EAAG,IAEHpB,KAAKC,UAAYqB,EAAgBM,UAAU,QAK3C,GAAI5B,KAAKG,SAASvB,OAAS,EAAG,CAC1B,IAAMiD,EAAY7B,KAAKG,SAAS,GAC1B2B,EAAaD,EAAUE,aAAa,QACpCC,EAAejD,SAASC,cAAc8C,GAExCE,IACAH,EAAUb,UAAUU,IAAI,uBACxBM,EAAahB,UAAUU,IAAI,uBAC3BM,EAAanC,MAAMqB,QAAU,QAE7BS,WAAW,WACPK,EAAanC,MAAMsB,QAAU,IAC7Ba,EAAanC,MAAMuB,UAAY,eACnC,EAAG,IAEHpB,KAAKC,UAAY6B,EAAWF,UAAU,GAG9C,CAER,GAAC,CAAAtB,IAAA,sBAAA7B,MAED,WAAsB,IAAAwD,EAAA,KAGlBjC,KAAKG,SAASW,QAAQ,SAAAO,GAClBA,EAAK7B,iBAAiB,QAAS,SAAC0C,GAC5BA,EAAEC,iBACF,IAAMC,EAAWf,EAAKU,aAAa,QAEnCE,EAAKI,YAAYD,EACrB,EACJ,GAGApC,KAAKE,aAAaV,iBAAiB,UAAW,SAAC0C,GAC3C,GAAc,cAAVA,EAAE5B,KAAiC,eAAV4B,EAAE5B,IAAsB,CACjD4B,EAAEC,iBACF,IAAMG,EAAsB,cAAVJ,EAAE5B,KAAuB,EAAI,EAC/C2B,EAAKM,kBAAkBD,EAC3B,CACJ,EACJ,GAAC,CAAAhC,IAAA,6BAAA7B,MAED,WAEIuB,KAAKG,SAASW,QAAQ,SAACO,EAAMmB,GACzB,IAAMJ,EAAWf,EAAKU,aAAa,QAAQH,UAAU,GACrDP,EAAKoB,aAAa,OAAQ,OAC1BpB,EAAKoB,aAAa,gBAAiBL,GACnCf,EAAKoB,aAAa,gBAAiBpB,EAAKL,UAAU0B,SAAS,wBAC3DrB,EAAKoB,aAAa,WAAYpB,EAAKL,UAAU0B,SAAS,uBAAyB,IAAM,KACzF,GAEA1C,KAAKI,YAAYU,QAAQ,SAACC,GACtBA,EAAQ0B,aAAa,OAAQ,YAC7B1B,EAAQ0B,aAAa,eAAgB1B,EAAQC,UAAU0B,SAAS,uBACpE,GAGA,IAAMC,EAAU3C,KAAKE,aAAalB,cAAc,wBAC5C2D,GACAA,EAAQF,aAAa,OAAQ,UAErC,GAAC,CAAAnC,IAAA,cAAA7B,MAED,SAAY2D,GAGHA,EAASQ,WAAW,OACrBR,EAAW,IAAMA,GAKrB,IAAIS,EAAgB9D,SAASC,cAAcoD,GAC3C,IAAKS,EAAe,CAGhB,GAAiB,qBAAbT,EAAiC,CACjC,IAAMU,EAAa/D,SAASC,cAAc,yCACtC8D,IAEAD,EAAgBC,EAExB,CACA,IAAKD,EACD,MAER,CAKA7C,KAAKG,SAASW,QAAQ,SAAAO,GAClBA,EAAKL,UAAUC,OAAO,uBACtBI,EAAKoB,aAAa,gBAAiB,SACnCpB,EAAKoB,aAAa,WAAY,KAClC,GAEAzC,KAAKI,YAAYU,QAAQ,SAAAC,GACrBA,EAAQC,UAAUC,OAAO,uBACzBF,EAAQ0B,aAAa,cAAe,QACpC1B,EAAQlB,MAAMqB,QAAU,OACxBH,EAAQlB,MAAMsB,QAAU,IACxBJ,EAAQlB,MAAMuB,UAAY,kBAC9B,GAGA,IAAM2B,EAAa/C,KAAKE,aAAalB,cAAc,WAADwC,OAAYY,EAAQ,OACtE,GAAIW,EAEAA,EAAW/B,UAAUU,IAAI,uBACzBqB,EAAWN,aAAa,gBAAiB,QACzCM,EAAWN,aAAa,WAAY,UAIpC,GAAiB,qBAAbL,EAAiC,CACjC,IAAMY,EAAeC,MAAMC,KAAKlD,KAAKG,UAAUgD,KAAK,SAAA9B,GAAI,OACpDA,EAAK+B,YAAYC,cAAcC,SAAS,WAAW,GAEnDN,IAEAA,EAAahC,UAAUU,IAAI,uBAC3BsB,EAAaP,aAAa,gBAAiB,QAC3CO,EAAaP,aAAa,WAAY,KAE9C,CAIJI,EAAc7B,UAAUU,IAAI,uBAC5BmB,EAAcJ,aAAa,cAAe,SAC1CI,EAAchD,MAAMqB,QAAU,QAG9BS,WAAW,WACPkB,EAAchD,MAAMsB,QAAU,IAC9B0B,EAAchD,MAAMuB,UAAY,eACpC,EAAG,IAGHpB,KAAKC,UAAYmC,EAASR,UAAU,GAIpC5B,KAAKuD,sBAAsBnB,EAAUW,EAAYF,GAGhC,qBAAbT,GAEApC,KAAKwD,uBAEb,GAAC,CAAAlD,IAAA,oBAAA7B,MAED,SAAkB6D,GACd,IAAMmB,EAAeR,MAAMC,KAAKlD,KAAKG,UAAUuD,UAAU,SAAArC,GAAI,OACzDA,EAAKL,UAAU0B,SAAS,sBAAsB,GAGlD,IAAsB,IAAlBe,EAAJ,CAEA,IAAME,GAAYF,EAAenB,EAAYtC,KAAKG,SAASvB,QAAUoB,KAAKG,SAASvB,OAC7EgF,EAAS5D,KAAKG,SAASwD,GAE7B3D,KAAKqC,YAAYuB,EAAO7B,aAAa,QALN,CAMnC,GAAC,CAAAzB,IAAA,wBAAA7B,MAED,SAAsB2D,EAAUW,EAAYF,GAExC,IAAMgB,EAAQ,IAAIC,YAAY,aAAc,CACxCC,OAAQ,CACJ3B,SAAUA,EACVW,WAAYA,EACZF,cAAeA,KAGvB7C,KAAKE,aAAa8D,cAAcH,EACpC,GAAC,CAAAvD,IAAA,eAAA7B,MAED,WACgC,oBAAjBwF,cACPA,aAAaC,QAAQ,kBAAmBlE,KAAKC,UAErD,GAAC,CAAAK,IAAA,eAAA7B,MAED,WACI,GAA4B,oBAAjBwF,aAA8B,CACrC,IAAME,EAAWF,aAAaG,QAAQ,mBAClCD,GAAYnE,KAAKE,aAAalB,cAAc,YAADwC,OAAa2C,EAAQ,QAChEnE,KAAKqC,YAAY,IAAM8B,EAE/B,CACJ,GAAC,CAAA7D,IAAA,eAAA7B,MAED,WACI,OAAOuB,KAAKC,SAChB,GAAC,CAAAK,IAAA,aAAA7B,MAED,WACI,OAAOwE,MAAMC,KAAKlD,KAAKG,UAAUkE,IAAI,SAAAhD,GAAI,OAAIA,EAAKU,aAAa,QAAQH,UAAU,EAAE,EACvF,GAAC,CAAAtB,IAAA,wBAAA7B,MAED,WAII,IAAM6F,EAAkBvF,SAASwF,eAAe,wBAC1CC,EAAmBzF,SAASwF,eAAe,yBAC3CE,EAA0B1F,SAASwF,eAAe,0BAClDG,EAAqB3F,SAASwF,eAAe,qBAEnD,GAAID,EAAiB,CACjB,IAAMK,EAAe5F,SAAS2B,iBAAiB,iBAC/C4D,EAAgBlB,YAAcuB,EAAa/F,MAC/C,CAEA,GAAI4F,EAAkB,CAClB,IAAMI,EAAqB7F,SAAS2B,iBAAiB,wBACrD8D,EAAiBpB,YAAcwB,EAAmBhG,MACtD,CAEA,GAAI6F,EAAyB,CACzB,IAAMI,EAAgB9F,SAAS2B,iBAAiB,kBAChD+D,EAAwBrB,YAAcyB,EAAcjG,MACxD,CAEA,GAAI8F,EAAoB,CACpB,IAAMI,EAAgB/F,SAAS2B,iBAAiB,0BAChDgE,EAAmBtB,YAAc0B,EAAclG,MACnD,CAGJ,IAAC,CAtUmB,IA2UdiB,EAAQd,SAASgG,cAAc,UAC/B3B,YAAc,mWAcpBrE,SAASiG,KAAKC,YAAYpF,GAyI9B,IAIMF,EAAa,WAYjB,OAAAG,EAXD,SAAAH,EAAYuF,GAAkBnF,EAAA,KAAAJ,GAC7BK,KAAKlB,UAAYoG,EACjBlF,KAAKlB,UAAUG,cAAgBe,KAG/BA,KAAKmF,eAAiB,CACrBC,aAAc,KACdC,WAAY,MAGbrF,KAAKK,MACN,EAAC,EAAAC,IAAA,kBAAA7B,MAED,WAAkB,IAAA6G,EAAA,KACXC,EAAcvF,KAAKlB,UAAUE,cAAc,iBAC5CuG,IAILtB,aAAauB,WAAW,cAGxBxF,KAAKyF,SAAS,SAEdF,EAAY/F,iBAAiB,QAAS,WACrC,IACMkG,EAA4B,UADbJ,EAAKxG,UAAUiD,aAAa,eAAiB,SACvB,QAAU,OACrDuD,EAAKG,SAASC,EACf,GACD,GAAC,CAAApF,IAAA,WAAA7B,MAED,SAASkH,GACR3F,KAAKlB,UAAU2D,aAAa,aAAckD,GAK1C,IAAMC,EAAc5F,KAAKlB,UAAUE,cAAc,iBAC7C4G,IAEFA,EAAY/F,MAAMuB,UADL,UAAVuE,EAC2B,gBAEA,mBAGjC,GAAC,CAAArF,IAAA,gBAAA7B,MAED,WAAgB,IAAAoH,EAAA,KACTC,EAAe9F,KAAKlB,UAAUE,cAAc,0BAC7C8G,GAELA,EAAatG,iBAAiB,QAAS,WACtC,IAAMuG,EAAiBF,EAAK/G,UAAU4B,iBAAiB,mBACjDsF,EAAU/C,MAAMC,KAAK6C,GAAgBE,MAAM,SAAAC,GAAI,OAAIA,EAAKlF,UAAU0B,SAAS,OAAO,GAExFqD,EAAejF,QAAQ,SAAAoF,GAClBF,EACHE,EAAKlF,UAAUC,OAAO,QAEtBiF,EAAKlF,UAAUU,IAAI,OAErB,GAEAoE,EAAa1C,YAAc4C,EAAU,aAAe,cACrD,EACD,GAAC,CAAA1F,IAAA,yBAAA7B,MAED,WACwBuB,KAAKlB,UAAU4B,iBAAiB,mBAExCI,QAAQ,SAAAoF,GACtB,IAAMC,EAASD,EAAKlH,cAAc,qBAC7BmH,IAELA,EAAO3G,iBAAiB,QAAS,WAChC0G,EAAKlF,UAAUoF,OAAO,OACvB,GAGAD,EAAO3G,iBAAiB,UAAW,SAAC0C,GACrB,UAAVA,EAAE5B,KAA6B,MAAV4B,EAAE5B,MAC1B4B,EAAEC,iBACF+D,EAAKlF,UAAUoF,OAAO,QAExB,GACD,EACD,GAAC,CAAA9F,IAAA,oBAAA7B,MAED,WACuBuB,KAAKlB,UAAU4B,iBAAiB,wBAExCI,QAAQ,SAAAuF,GACrBA,EAAO7G,iBAAiB,QAAS,WAChC,IAAM8G,EAAWD,EAAOE,QAAQ,yBAC1BC,EAAmBF,EAAStH,cAAc,+BAEhD,GAAIwH,EAAkB,CACrB,IAAMC,EAAwD,SAA3CH,EAASvE,aAAa,iBACzCuE,EAAS7D,aAAa,iBAAkBgE,GAEnCA,GAOJD,EAAiB3G,MAAMsB,QAAU,IACjCqF,EAAiB3G,MAAMuB,UAAY,oBACnCO,WAAW,WACV6E,EAAiB3G,MAAMqB,QAAU,MAClC,EAAG,OAVHsF,EAAiB3G,MAAMqB,QAAU,QACjCS,WAAW,WACV6E,EAAiB3G,MAAMsB,QAAU,IACjCqF,EAAiB3G,MAAMuB,UAAY,eACpC,EAAG,IAQL,CACD,EACD,EACD,GAAC,CAAAd,IAAA,qBAAA7B,MAED,WACC,IAAMiI,EAAiB1G,KAAKlB,UAAUE,cAAc,oBAC9C2H,EAAe3G,KAAKlB,UAAUE,cAAc,mBAElD,GAAK0H,GAAmBC,EAAxB,CAEA,IAAMC,EACE,qKADFA,EAEE,uIAFFA,EAGE,gHAHFA,EAIE,8HAJFA,EAKG,+HAGHC,EAAuB,WAC5B,IAAMC,EAAQC,WAAWJ,EAAa5E,aAAa,eAAiB,GAChEiF,EAAUJ,EAEVE,GAAS,EAAGE,EAAUJ,EACjBE,GAAS,EAAGE,EAAUJ,EACtBE,GAAS,EAAGE,EAAUJ,EACtBE,GAAS,IAAGE,EAAUJ,GAE/BF,EAAetD,YAAc4D,CAC9B,EAGAL,EAAanH,iBAAiB,aAAc,WAC3CqH,IACAH,EAAe1F,UAAUU,IAAI,UAC9B,GAEAiF,EAAanH,iBAAiB,aAAc,WAC3CkH,EAAe1F,UAAUC,OAAO,UACjC,GAGA4F,GAjC4C,CAkC7C,GAAC,CAAAvG,IAAA,qBAAA7B,MAED,WACC,IAAMkI,EAAe3G,KAAKlB,UAAUE,cAAc,mBAClD,GAAK2H,EAAL,CAEA,IAAMM,EAAcF,WAAWJ,EAAa5E,aAAa,eAAiB,GACpEmF,EAAeP,EAAa3H,cAAc,qBAEhD,GAAKkI,EAAL,CAEA,IAAIC,EAAe,EAEbC,EAAYC,YAAYC,MAExBC,EAAO,SAAC7I,GACb,IAAM8I,EAAU9I,EAAY0I,EACtBK,EAAWC,KAAKC,IAAIH,EALV,IAK8B,GAGxCI,EAAe,EAAIF,KAAKG,IAAI,EAAIJ,EAAU,GAChDN,EAAeF,EAAcW,EAE7BV,EAAa9D,YAAc+D,EAAaW,QAAQ,GAE5CL,EAAW,EACdM,sBAAsBR,GAEtBZ,EAAa3F,UAAUU,IAAI,SAE7B,EAEAqG,sBAAsBR,EAvBG,CALA,CA6B1B,GAAC,CAAAjH,IAAA,sBAAA7B,MAED,WACoBuB,KAAKlB,UAAU4B,iBAAiB,eAExCI,QAAQ,SAACkH,EAAKxF,GACxBb,WAAW,WACVqG,EAAIhH,UAAUU,IAAI,UACnB,EAAW,IAARc,EACJ,EACD,GAAC,CAAAlC,IAAA,uBAAA7B,MAED,WAMsB,oBAAVwJ,YAOmB,IAAnBA,MAAMC,UAAmCD,MAAMC,SAASC,KAMpC,IADPpJ,SAAS2B,iBAAiB,kBAC9B9B,SAMpBoB,KAAKoI,wBACLpI,KAAKqI,sBAGLrI,KAAKsI,+BArBJtI,KAAKuI,eAAe,4EAsBtB,GAAC,CAAAjI,IAAA,wBAAA7B,MAED,WAEC,IAAM+J,EAAWxI,KAAKlB,UAAUE,cAAc,sBAC9C,GAAKwJ,EAAL,CAOIxI,KAAKmF,eAAeC,eAEvBpF,KAAKmF,eAAeC,aAAa1F,UACjCM,KAAKmF,eAAeC,aAAe,MAIpC,IAAMqD,EAAYzI,KAAK0I,mBAGvB,GAAID,GAAaA,EAAU7J,OAAS,EAEnC,IACC,IAAM+J,EAAc,CACnBC,KAAM,OACNC,KAAM,CACLC,OAAQL,EAAUpE,IAAI,SAAA0E,GAAC,OAAI,IAAIC,KAAKD,EAAEZ,KAAK,GAC3Cc,SAAU,CAAC,CACVC,MAAO,kBACPL,KAAMJ,EAAUpE,IAAI,SAAA0E,GAAC,OAAIA,EAAEjC,KAAK,GAChCqC,YAAa,UACbC,gBAAiB,0BACjBC,YAAa,EACbC,MAAM,EACNC,QAAS,GACTC,qBAAsB,UACtBC,iBAAkB,UAClBC,iBAAkB,EAClBC,YAAa,EACbC,iBAAkB,KAGpBC,QAAS,CACRC,YAAY,EACZC,qBAAqB,EACrBC,YAAa,CACZC,WAAW,EACXC,KAAM,SAEPC,OAAQ,CACPC,EAAG,CACFxB,KAAM,OACNyB,KAAM,CACLC,KAAM7B,EAAU7J,OAAS,GAAK,OAAS,MACvC2L,eAAgB,CACfC,IAAK,QACLC,KAAM,UAGRC,KAAM,CAAEC,MAAO,4BACfC,MAAO,CACND,MAAO,2BACPE,KAAM,CACLC,KAAM,MAITC,EAAG,CACFC,aAAa,EACbrD,IAAK,EACLsD,IAAK,GACLP,KAAM,CAAEC,MAAO,4BACfC,MAAO,CACND,MAAO,2BACPE,KAAM,CACLC,KAAM,OAKVI,QAAS,CACRC,OAAQ,CAAEjK,SAAS,GACnBkK,QAAS,CACRhC,gBAAiB,qBACjBiC,WAAY,OACZC,UAAW,OACXnC,YAAa,0BACbE,YAAa,EACbkC,aAAc,EACdC,eAAe,EACfC,UAAW,CACVC,MAAO,SAASC,GACf,MAAO,UAAYA,EAAQ,GAAGC,OAAOb,EAAEjD,QAAQ,EAChD,EACAoB,MAAO,SAASyC,GAAS,IAAAE,EAElBC,EAAYH,EAAQG,UAG1B,MAAO,WAFkC,QAAvBD,EAAGpD,EAAUqD,UAAU,IAAAD,OAAA,EAApBA,EAAsBE,eACP,IAAI/C,KAAK2C,EAAQC,OAAOxB,GAAG4B,qBAEhE,OASLhM,KAAKmF,eAAeC,aAAe,IAAI6C,MAAMO,EAAUG,EAExD,CAAE,MAAOsD,GAERjM,KAAKuI,eAAe,qCACrB,MAIAvI,KAAKkM,oBAAoB1D,EAAU,KAAM,gBAAiB,iDA/G3D,MAFCxI,KAAKuI,eAAe,+EAmHtB,GAAC,CAAAjI,IAAA,sBAAA7B,MAED,WAEC,IAAM0N,EAASnM,KAAKlB,UAAUE,cAAc,oBAC5C,GAAKmN,EAAL,CAOInM,KAAKmF,eAAeE,aAEvBrF,KAAKmF,eAAeE,WAAW3F,UAC/BM,KAAKmF,eAAeE,WAAa,MAIlC,IAAM+G,EAAUpM,KAAKqM,iBAGrB,GAAID,GAAWA,EAAQxN,OAAS,EAC/B,IACCoB,KAAKmF,eAAeE,WAAa,IAAI4C,MAAMkE,EAAQ,CAClDvD,KAAM,OACNC,KAAM,CACLC,OAAQsD,EAAQ/H,IAAI,SAAA0E,GAAC,OAAI,IAAIC,KAAKD,EAAEZ,KAAK,GACzCc,SAAU,CAAC,CACVC,MAAO,MACPL,KAAMuD,EAAQ/H,IAAI,SAAA0E,GAAC,OAAIA,EAAEuD,GAAG,GAC5BnD,YAAa,UACbC,gBAAiB,0BACjBC,YAAa,EACbC,MAAM,EACNC,QAAS,GACTC,qBAAsB,UACtBC,iBAAkB,UAClBC,iBAAkB,EAClBC,YAAa,EACbC,iBAAkB,KAGpBC,QAAS,CACRC,YAAY,EACZC,qBAAqB,EACrBC,YAAa,CACZC,WAAW,EACXC,KAAM,SAEPC,OAAQ,CACPC,EAAG,CACFxB,KAAM,OACNyB,KAAM,CACLC,KAAM8B,EAAQxN,OAAS,GAAK,OAAS,MACrC2L,eAAgB,CACfC,IAAK,QACLC,KAAM,UAGRC,KAAM,CAAEC,MAAO,4BACfC,MAAO,CACND,MAAO,2BACPE,KAAM,CACLC,KAAM,MAITC,EAAG,CACFC,aAAa,EACbrD,IAAK,GACLsD,IAAK,GACLP,KAAM,CAAEC,MAAO,4BACfC,MAAO,CACND,MAAO,2BACPE,KAAM,CACLC,KAAM,OAKVI,QAAS,CACRC,OAAQ,CAAEjK,SAAS,GACnBkK,QAAS,CACRhC,gBAAiB,qBACjBiC,WAAY,OACZC,UAAW,OACXnC,YAAa,0BACbE,YAAa,EACbkC,aAAc,EACdC,eAAe,EACfC,UAAW,CACVC,MAAO,SAASC,GACf,MAAO,QAAUA,EAAQ,GAAGC,OAAOb,EAAEjD,QAAQ,EAC9C,EACAoB,MAAO,SAASyC,GAAS,IAAAY,EAElBT,EAAYH,EAAQG,UAG1B,MAAO,WAFgC,QAArBS,EAAGH,EAAQN,UAAU,IAAAS,OAAA,EAAlBA,EAAoBR,eACL,IAAI/C,KAAK2C,EAAQC,OAAOxB,GAAG4B,qBAEhE,OAON,CAAE,MAAOC,GAERjM,KAAKuI,eAAe,mCACrB,MAIAvI,KAAKkM,oBAAoBC,EAAQ,KAAM,cAAe,+CA1GvD,MAFCnM,KAAKuI,eAAe,6EA8GtB,GAEA,CAAAjI,IAAA,6BAAA7B,MACA,WAA6B,IAAA+N,EAAA,KAItBC,EAAY1N,SAASC,cAAc,4BACrCyN,GACHA,EAAUjN,iBAAiB,QAAS,WAEnCmC,WAAW,WAEL6K,EAAKrH,eAAeC,cAExBoH,EAAKpE,wBAEDoE,EAAKrH,eAAeE,YAExBmH,EAAKnE,sBAINmE,EAAKnN,cACN,EAAG,IACJ,GAIDN,SAASS,iBAAiB,aAAc,SAACqE,GACpCA,EAAME,QAAoC,kBAA1BF,EAAME,OAAO3B,UAEhCT,WAAW,WACV6K,EAAKlN,oBACN,EAAG,IAEL,EACD,GAEA,CAAAgB,IAAA,mBAAA7B,MACA,WACC,IAKC,GAA6B,oBAAlBiO,eAAiCA,cAAcC,eAAiBD,cAAcC,cAAc/N,OAAS,EAAG,CAIlH,IAAM6J,EAAYiE,cAAcC,cAActI,IAAI,SAAAuI,GAAK,MAAK,CAC3DzE,KAAM,IAAIa,KAAK4D,EAAMzE,MAAM0E,cAC3B/F,MAAOC,WAAW6F,EAAM9F,OACxBiF,aAAca,EAAMzE,KACpB,GAQD,OAHAM,EAAUqE,KAAK,SAACC,EAAGC,GAAC,OAAK,IAAIhE,KAAK+D,EAAE5E,MAAQ,IAAIa,KAAKgE,EAAE7E,KAAK,GAGrDM,CACR,CAKA,IAAItB,EAAe,EACbD,EAAenI,SAASC,cAAc,wBAC5C,GAAIkI,EACHC,EAAeJ,WAAWG,EAAa+F,QAAQ9F,eAAiB,MAC1D,KAAA+F,EAEAC,EAAiD,QAAxCD,EAAGnO,SAASC,cAAc,sBAAc,IAAAkO,OAAA,EAArCA,EAAuC9J,YACrD+J,IACHhG,EAAeJ,WAAWoG,IAAc,EAE1C,CAKA,IAAMC,EAAkBrO,SAAS2B,iBAAiB,0BAC5C+H,EAAY,GACd4E,EAAe,EA+CnB,GA3CAD,EAAgBtM,QAAQ,SAACwM,EAAM9K,GAC9B,IAAM0E,EAAeoG,EAAKtO,cAAc,gBAClCuO,EAAcD,EAAKtO,cAAc,oBAEvC,GAAIkI,GAAgBqG,EAAa,CAChC,IAMIpF,EANErB,EAAQC,WAAWG,EAAa9D,aAChCoK,EAAWD,EAAYnK,YAa7B,GANC+E,EADgB,WAAbqF,EACI,IAAIxE,KAEJ,IAAIA,KAAKwE,IAIZC,MAAM3G,KAAW2G,MAAMtF,EAAKuF,WAAY,CAE5C,IAAMC,EAAa,IAAI3E,KAAKb,EAAKuF,UAA4B,IAAfL,GAC9C5E,EAAUmF,KAAK,CACdzF,KAAMwF,EAAWd,cACjB/F,MAAOA,EACPiF,aAAc5D,EAAK0E,cAAcgB,MAAM,KAAK,KAE7CR,GACD,CACD,CACD,GAGyB,IAArB5E,EAAU7J,QAAgBuI,EAAe,GAE5CsB,EAAUmF,KAAK,CACdzF,MAAM,IAAIa,MAAO6D,cACjB/F,MAAOK,EACP4E,cAAc,IAAI/C,MAAO6D,cAAcgB,MAAM,KAAK,KAK3B,IAArBpF,EAAU7J,OAIb,IADA,IACSkP,EAAI,EAAGA,GAAK,EAAGA,IAAK,CAC5B,IAAM3F,EAAO,IAAIa,KACjBb,EAAK4F,QAAQ5F,EAAK6F,UAAYF,GAC9B,IAAMG,EAAoC,GAAvBvG,KAAKwG,SAAW,IAC7BpH,EAAQY,KAAKuD,IAAI,EAAGvD,KAAKC,IAAI,GALlB,IAKkCsG,IAEnDxF,EAAUmF,KAAK,CACdzF,KAAMA,EAAK0E,cACX/F,MAAOC,WAAWD,EAAMgB,QAAQ,IAChCiE,aAAc5D,EAAK0E,cAAcgB,MAAM,KAAK,GAC5CM,UAAU,GAEZ,CAOD,OAHA1F,EAAUqE,KAAK,SAACC,EAAGC,GAAC,OAAK,IAAIhE,KAAK+D,EAAE5E,MAAQ,IAAIa,KAAKgE,EAAE7E,KAAK,GAGrDM,CACR,CAAE,MAAOwD,GAGR,MAAO,CAAC,CACP9D,MAAM,IAAIa,MAAO6D,cACjB/F,MAAO,IACPiF,cAAc,IAAI/C,MAAO6D,cAAcgB,MAAM,KAAK,GAClDM,UAAU,GAEZ,CACD,GAEA,CAAA7N,IAAA,iBAAA7B,MACA,WACC,IAEC,GAA6B,oBAAlBiO,eAAiCA,cAAc0B,aAAe1B,cAAc0B,YAAYxP,OAAS,EAAG,CAI9G,IAAMwN,EAAUM,cAAc0B,YAAY/J,IAAI,SAAAuI,GAAK,MAAK,CACvDzE,KAAM,IAAIa,KAAK4D,EAAMzE,MAAM0E,cAC3BP,IAAKvF,WAAW6F,EAAMN,KACtBP,aAAca,EAAMzE,KACpB,GAKD,OAFAiE,EAAQU,KAAK,SAACC,EAAGC,GAAC,OAAK,IAAIhE,KAAK+D,EAAE5E,MAAQ,IAAIa,KAAKgE,EAAE7E,KAAK,GAEnDiE,CACR,CAGA,IAAMiC,EAAkBtP,SAAS2B,iBAAiB,iDAC5C0L,EAAU,GACZiB,EAAe,EA2CnB,GAzCAgB,EAAgBvN,QAAQ,SAACwN,GACxB,IAAMC,EAAeD,EAAYtP,cAAc,4BACzCuO,EAAce,EAAYtP,cAAc,mBAE9C,GAAIuP,GAAgBhB,EAAa,CAChC,IAAMjB,EAAMvF,WAAWwH,EAAanL,aAC9BoK,EAAWD,EAAYnK,YAGzB+E,EAAO,IAAIa,KACf,GAAIwE,EAASlK,SAAS,OAAQ,CAE7B,IAAMkL,EAAQhB,EAASgB,MAAM,sDAC7B,GAAIA,EAAO,CACV,IAAMC,EAASC,SAASF,EAAM,IACxBlE,EAAOkE,EAAM,GACflE,EAAKhH,SAAS,OACjB6E,EAAK4F,QAAQ5F,EAAK6F,UAAYS,GACpBnE,EAAKhH,SAAS,QACxB6E,EAAKwG,SAASxG,EAAKyG,WAAaH,GACtBnE,EAAKhH,SAAS,WACxB6E,EAAK0G,WAAW1G,EAAK2G,aAAeL,EAEtC,CACD,CAGA,IAAKhB,MAAMnB,GAAM,CAEhB,IAAMqB,EAAa,IAAI3E,KAAKb,EAAKuF,UAA4B,IAAfL,GAC9CjB,EAAQwB,KAAK,CACZzF,KAAMwF,EAAWd,cACjBP,IAAKA,EACLP,aAAc5D,EAAK0E,cAAcgB,MAAM,KAAK,KAE7CR,GACD,CACD,CACD,GAGuB,IAAnBjB,EAAQxN,OAAc,CACzB,IAAMmQ,EAAiBhQ,SAASC,cAAc,0BAC9C,GAAI+P,EAAgB,CACnB,IAAMC,EAAUD,EAAe3L,YACzBkJ,EAAMvF,WAAWiI,GAClBvB,MAAMnB,IACVF,EAAQwB,KAAK,CACZzF,MAAM,IAAIa,MAAO6D,cACjBP,IAAKA,EACLP,cAAc,IAAI/C,MAAO6D,cAAcgB,MAAM,KAAK,IAGrD,CACD,CAGA,GAAuB,IAAnBzB,EAAQxN,OAIX,IADA,IACSkP,EAAI,EAAGA,GAAK,EAAGA,IAAK,CAC5B,IAAM3F,EAAO,IAAIa,KACjBb,EAAK4F,QAAQ5F,EAAK6F,UAAYF,GAC9B,IAAMG,EAAoC,IAAvBvG,KAAKwG,SAAW,IAC7B5B,EAAM5E,KAAKuD,IAAI,GAAIvD,KAAKC,IAAI,GALnB,KAKiCsG,IAEhD7B,EAAQwB,KAAK,CACZzF,KAAMA,EAAK0E,cACXP,IAAKvF,WAAWuF,EAAIxE,QAAQ,IAC5BiE,aAAc5D,EAAK0E,cAAcgB,MAAM,KAAK,GAC5CM,UAAU,GAEZ,CAMD,OAFA/B,EAAQU,KAAK,SAACC,EAAGC,GAAC,OAAK,IAAIhE,KAAK+D,EAAE5E,MAAQ,IAAIa,KAAKgE,EAAE7E,KAAK,GAEnDiE,CACR,CAAE,MAAOH,GAGR,MAAO,CAAC,CACP9D,MAAM,IAAIa,MAAO6D,cACjBP,IAAK,KACLP,cAAc,IAAI/C,MAAO6D,cAAcgB,MAAM,KAAK,GAClDM,UAAU,GAEZ,CACD,GAEA,CAAA7N,IAAA,sBAAA7B,MACA,SAAoBwQ,EAAQC,EAAMxD,EAAOyD,GACxC,IAAMC,EAAUH,EAAOI,cACnBD,IACHA,EAAQE,UAAY,0MAAH9N,OAE+D0N,EAAI,6FAAA1N,OACTkK,EAAK,4EAAAlK,OACrB2N,EAAO,gCAIpE,GAEA,CAAA7O,IAAA,iBAAA7B,MACA,SAAe0Q,GAEQpQ,SAAS2B,iBAAiB,kBAClCI,QAAQ,SAAAsO,GAChBA,EAAQpQ,cAAc,iBAAoBoQ,EAAQpQ,cAAc,kBACpEoQ,EAAQE,UAAY,0WAAH9N,OAG8C2N,EAAO,uKAKxE,EACD,GAEA,CAAA7O,IAAA,eAAA7B,MACA,WAIC,GAAIuB,KAAKmF,eAAeC,aAAc,CACrC,IAAMmK,EAAevP,KAAK0I,mBAC1B1I,KAAKmF,eAAeC,aAAayD,KAAKC,OAASyG,EAAalL,IAAI,SAAA0E,GAAC,OAAI,IAAIC,KAAKD,EAAEZ,KAAK,GACrFnI,KAAKmF,eAAeC,aAAayD,KAAKI,SAAS,GAAGJ,KAAO0G,EAAalL,IAAI,SAAA0E,GAAC,OAAIA,EAAEjC,KAAK,GACtF9G,KAAKmF,eAAeC,aAAaoK,OAAO,OACzC,CAGA,GAAIxP,KAAKmF,eAAeE,WAAY,CACnC,IAAMoK,EAAazP,KAAKqM,iBACxBrM,KAAKmF,eAAeE,WAAWwD,KAAKC,OAAS2G,EAAWpL,IAAI,SAAA0E,GAAC,OAAI,IAAIC,KAAKD,EAAEZ,KAAK,GACjFnI,KAAKmF,eAAeE,WAAWwD,KAAKI,SAAS,GAAGJ,KAAO4G,EAAWpL,IAAI,SAAA0E,GAAC,OAAIA,EAAEuD,GAAG,GAChFtM,KAAKmF,eAAeE,WAAWmK,OAAO,OACvC,CACD,GAEA,CAAAlP,IAAA,eAAA7B,MACA,SAAamK,EAAMnK,GAAyB,IAAlBC,EAASC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAG/B2I,EAAM5I,EAAY,IAAIsK,KAAKtK,GAAa,IAAIsK,KAC5C0G,EAAkB,IAAI1G,KAAK1B,EAAIoG,UAA4B,IAAhBhG,KAAKwG,UAEzC,UAATtF,EACC5I,KAAKmF,eAAeC,eACvBpF,KAAKmF,eAAeC,aAAayD,KAAKC,OAAO8E,KAAK8B,GAClD1P,KAAKmF,eAAeC,aAAayD,KAAKI,SAAS,GAAGJ,KAAK+E,KAAKnP,GAC5DuB,KAAKmF,eAAeC,aAAaoK,OAAO,WAEtB,QAAT5G,GACN5I,KAAKmF,eAAeE,aACvBrF,KAAKmF,eAAeE,WAAWwD,KAAKC,OAAO8E,KAAK8B,GAChD1P,KAAKmF,eAAeE,WAAWwD,KAAKI,SAAS,GAAGJ,KAAK+E,KAAKnP,GAC1DuB,KAAKmF,eAAeE,WAAWmK,OAAO,UAGzC,GAEA,CAAAlP,IAAA,iCAAA7B,MACA,WAAiC,IAAAkR,EAAA,KAER3P,KAAKlB,UAAU4B,iBAAiB,oBAExCI,QAAQ,SAAAwM,GAEvBA,EAAK9N,iBAAiB,aAAc,WACnC8N,EAAKzN,MAAMuB,UAAY,kBACxB,GAEAkM,EAAK9N,iBAAiB,aAAc,WACnC8N,EAAKzN,MAAMuB,UAAY,eACxB,GAGsBkM,EAAK5M,iBAAiB,QAC9BI,QAAQ,SAAAuF,GACrBA,EAAO7G,iBAAiB,QAAS,SAAC0C,GAClBmE,EAAOjD,YAAYwM,OACVtC,EAAKtO,cAAc,qBAAqBoE,WACjE,EACD,EACD,GAGApD,KAAKlB,UAAUU,iBAAiB,QAAS,SAAC0C,GACzC,IAAM2N,EAAqB3N,EAAE4N,OAAOvJ,QAAQ,wBACtCwJ,EAAe7N,EAAE4N,OAAOvJ,QAAQ,kBAElCsJ,IACH3N,EAAEC,iBACFwN,EAAKK,cAAcH,EAAoB,4BAGpCE,IACH7N,EAAEC,iBACFwN,EAAKK,cAAcD,EAAc,qBAEnC,EACD,GAAC,CAAAzP,IAAA,gBAAA7B,MAED,SAAc4H,EAAQ4J,GAErB,IACMC,EADiB7J,EAAOE,QAAQ,oBACPvH,cAAc,IAAMiR,GAE9CC,IAML7J,EAAOrF,UAAUoF,OAAO,UAGL8J,EAAQlP,UAAU0B,SAAS,YAiBxB,sBAAjBuN,GACHjQ,KAAKmQ,oBAAoBD,EAAS,OAGlCvO,WAAW,WACVuO,EAAQlP,UAAUC,OAAO,YACzBU,WAAW,WACVuO,EAAQrQ,MAAMqB,QAAU,OACxBgP,EAAQlP,UAAUU,IAAI,SACvB,EAAG,IACJ,EAAG,OAGHwO,EAAQlP,UAAUC,OAAO,YACzBU,WAAW,WACVuO,EAAQrQ,MAAMqB,QAAU,OACxBgP,EAAQlP,UAAUU,IAAI,SACvB,EAAG,OA/BJwO,EAAQrQ,MAAMqB,QAAU,QACxBgP,EAAQlP,UAAUC,OAAO,UAGzB8G,sBAAsB,WACrBmI,EAAQlP,UAAUU,IAAI,WACvB,GAGqB,sBAAjBuO,GACHjQ,KAAKmQ,oBAAoBD,EAAS,OAwBrC,GAAC,CAAA5P,IAAA,sBAAA7B,MAED,SAAoByR,EAAS5N,GACP4N,EAAQxP,iBAAiB,wBAEjCI,QAAQ,SAACsP,EAAK5N,GAC1B,IAAM6N,EAAcD,EAAIvQ,MAAMyQ,MAC9BF,EAAIvQ,MAAM0Q,YAAY,iBAAkBF,GAGxC1O,WAAW,WACQ,OAAdW,GACH8N,EAAIpP,UAAUC,OAAO,eACrBmP,EAAIpP,UAAUU,IAAI,gBAElB0O,EAAIpP,UAAUC,OAAO,cACrBmP,EAAIpP,UAAUU,IAAI,eAEpB,EAAW,IAARc,EACJ,EACD,GAEA,CAAAlC,IAAA,2BAAA7B,MACA,WACC,IAAM+R,EAAexQ,KAAKlB,UAAUE,cAAc,kBAClD,GAAIwR,EAAc,CACjB,IAAMH,EAAcG,EAAa3Q,MAAMyQ,MACvCE,EAAa3Q,MAAMyQ,MAAQ,KAE3B3O,WAAW,WACV6O,EAAa3Q,MAAMyQ,MAAQD,CAC5B,EAAG,IACJ,CACD,GAEA,CAAA/P,IAAA,OAAA7B,MACA,WACCuB,KAAKyQ,oBACLzQ,KAAK0Q,qBACL1Q,KAAK2Q,qBACL3Q,KAAK4Q,sBACL5Q,KAAK6Q,uBACL7Q,KAAK8Q,yBACL9Q,KAAK+Q,gBACL/Q,KAAKgR,iCACLhR,KAAKiR,2BACLjR,KAAKkR,iBAEN,GAEA,CAAA5Q,IAAA,UAAA7B,MACA,WAIKuB,KAAKmF,eAAeC,eACvBpF,KAAKmF,eAAeC,aAAa1F,UACjCM,KAAKmF,eAAeC,aAAe,MAGhCpF,KAAKmF,eAAeE,aACvBrF,KAAKmF,eAAeE,WAAW3F,UAC/BM,KAAKmF,eAAeE,WAAa,MAIlCrF,KAAKlB,UAAUG,cAAgB,IAChC,GAEA,CAAAqB,IAAA,qBAAA7B,MACA,WAIKuB,KAAKmF,eAAeC,eACvBpF,KAAKmF,eAAeC,aAAa1F,UACjCM,KAAKmF,eAAeC,aAAe,MAGhCpF,KAAKmF,eAAeE,aACvBrF,KAAKmF,eAAeE,WAAW3F,UAC/BM,KAAKmF,eAAeE,WAAa,MAIlCrF,KAAKoI,wBACLpI,KAAKqI,qBACN,IAAC,CAl/BiB,E","sources":["webpack://ennulife-assessments/./assets/js/user-dashboard.js"],"sourcesContent":["/**\n * ENNU Life User Dashboard JavaScript\n * This file controls all the interactivity for the \"Bio-Metric Canvas\" dashboard.\n */\n\n// TEST: Check if this file is loading\nconsole.log('=== ENNU DASHBOARD JS LOADED ===');\nconsole.log('Current timestamp:', new Date().toISOString());\nconsole.log('Script URL:', document.currentScript ? document.currentScript.src : 'Unknown');\n\n// Note: Toggle functions are now defined inline in the template for immediate availability\n\n// Global functions for chart updates (can be called from other scripts)\nwindow.ENNUCharts = {\n\t// Add a new score data point\n\taddScorePoint: function(value, timestamp = null) {\n\t\tconst dashboard = document.querySelector('.ennu-user-dashboard');\n\t\tif (dashboard && dashboard.ennuDashboard) {\n\t\t\tdashboard.ennuDashboard.addDataPoint('score', value, timestamp);\n\t\t}\n\t},\n\t\n\t// Add a new BMI data point\n\taddBMIPoint: function(value, timestamp = null) {\n\t\tconst dashboard = document.querySelector('.ennu-user-dashboard');\n\t\tif (dashboard && dashboard.ennuDashboard) {\n\t\t\tdashboard.ennuDashboard.addDataPoint('bmi', value, timestamp);\n\t\t}\n\t},\n\t\n\t// Refresh all charts\n\trefreshCharts: function() {\n\t\tconst dashboard = document.querySelector('.ennu-user-dashboard');\n\t\tif (dashboard && dashboard.ennuDashboard) {\n\t\t\tdashboard.ennuDashboard.updateCharts();\n\t\t}\n\t},\n\t\n\t// Reinitialize all charts (useful for fixing canvas errors)\n\treinitializeCharts: function() {\n\t\tconst dashboard = document.querySelector('.ennu-user-dashboard');\n\t\tif (dashboard && dashboard.ennuDashboard) {\n\t\t\tdashboard.ennuDashboard.reinitializeCharts();\n\t\t}\n\t}\n};\n\n// Prevent multiple initializations\nlet dashboardInitialized = false;\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('ENNU Dashboard: DOM Content Loaded');\n    \n    // Prevent multiple initializations\n    if (dashboardInitialized) {\n        console.log('ENNU Dashboard: Already initialized, skipping...');\n        return;\n    }\n    \n    // Verify toggle functions are available\n    console.log('ENNU Dashboard: Toggle functions status:', {\n        togglePanel: typeof window.togglePanel,\n        toggleBiomarkerMeasurements: typeof window.toggleBiomarkerMeasurements,\n        toggleVectorCategory: typeof window.toggleVectorCategory\n    });\n    \n    const dashboardEl = document.querySelector('.ennu-user-dashboard');\n    if (dashboardEl) {\n        console.log('ENNU Dashboard: Dashboard element found, initializing...');\n        \n        // Check if user is logged in by looking for logged-out container\n        const loggedOutContainer = dashboardEl.querySelector('.dashboard-logged-out-container');\n        if (loggedOutContainer) {\n            console.log('ENNU Dashboard: User is not logged in - showing logged out state');\n            // Don't initialize charts for logged out users\n            return;\n        }\n        \n        // Destroy existing dashboard instance if it exists\n        if (dashboardEl.ennuDashboard) {\n            console.log('ENNU Dashboard: Destroying existing dashboard instance');\n            dashboardEl.ennuDashboard.destroy();\n        }\n        \n        new ENNUDashboard(dashboardEl);\n        dashboardInitialized = true;\n    } else {\n        console.log('ENNU Dashboard: Dashboard element not found');\n    }\n    \n    // Initialize My Story Tabs independently to ensure they work\n    console.log('ENNU Dashboard: Initializing My Story Tabs Manager...');\n    const storyTabsManager = new MyStoryTabsManager();\n});\n\n\n\n/**\n * My Story Tabs Manager\n * Handles tab navigation for the My Story section\n */\nclass MyStoryTabsManager {\n    constructor() {\n        console.log('MyStoryTabsManager: Constructor called');\n        this.activeTab = 'tab-my-assessments';\n        this.tabContainer = null;\n        this.tabLinks = [];\n        this.tabContents = [];\n        \n        this.init();\n    }\n    \n    init() {\n        console.log('MyStoryTabsManager: Init called');\n        // Wait for DOM to be ready\n        if (document.readyState === 'loading') {\n            console.log('MyStoryTabsManager: DOM still loading, adding event listener');\n            document.addEventListener('DOMContentLoaded', () => this.initialize());\n        } else {\n            console.log('MyStoryTabsManager: DOM ready, initializing immediately');\n            this.initialize();\n        }\n    }\n    \n    initialize() {\n        console.log('MyStoryTabsManager: Initialize called');\n        this.tabContainer = document.querySelector('.my-story-tabs');\n        \n        if (!this.tabContainer) {\n            console.error('MyStoryTabsManager: Tab container not found!');\n            return;\n        }\n        \n        console.log('MyStoryTabsManager: Tab container found');\n        \n        this.tabLinks = this.tabContainer.querySelectorAll('.my-story-tab-nav a');\n        this.tabContents = this.tabContainer.querySelectorAll('.my-story-tab-content');\n        \n        console.log('MyStoryTabsManager: Found', this.tabLinks.length, 'tab links and', this.tabContents.length, 'tab contents');\n        \n        if (this.tabLinks.length === 0 || this.tabContents.length === 0) {\n            console.error('MyStoryTabsManager: No tab links or contents found!');\n            return;\n        }\n        \n        this.setupEventListeners();\n        this.addAccessibilityAttributes();\n        \n        // Ensure first tab is active by default\n        this.activateFirstTab();\n        \n    }\n    \n    activateFirstTab() {\n        console.log('MyStoryTabsManager: Activating first tab');\n        // Hide all tab contents first\n        this.tabContents.forEach(content => {\n            content.classList.remove('my-story-tab-active');\n            content.style.display = 'none';\n            content.style.opacity = '0';\n            content.style.transform = 'translateY(10px)';\n        });\n        \n        // Remove active class from all tab links\n        this.tabLinks.forEach(link => {\n            link.classList.remove('my-story-tab-active');\n        });\n        \n        // Activate the My Biomarkers tab by default\n        const biomarkersTabId = '#tab-my-biomarkers';\n        const biomarkersLink = this.tabContainer.querySelector(`a[href=\"${biomarkersTabId}\"]`);\n        const biomarkersContent = document.querySelector(biomarkersTabId);\n        \n        console.log('MyStoryTabsManager: Biomarkers tab ID:', biomarkersTabId);\n        console.log('MyStoryTabsManager: Biomarkers link element:', biomarkersLink);\n        console.log('MyStoryTabsManager: Biomarkers content element:', biomarkersContent);\n        \n        if (biomarkersLink && biomarkersContent) {\n            biomarkersLink.classList.add('my-story-tab-active');\n            biomarkersContent.classList.add('my-story-tab-active');\n            biomarkersContent.style.display = 'block';\n            \n            // Trigger animation after a brief delay\n            setTimeout(() => {\n                biomarkersContent.style.opacity = '1';\n                biomarkersContent.style.transform = 'translateY(0)';\n            }, 50);\n            \n            this.activeTab = biomarkersTabId.substring(1);\n            console.log('MyStoryTabsManager: Biomarkers tab activated:', this.activeTab);\n        } else {\n            console.error('MyStoryTabsManager: Biomarkers tab elements not found!');\n            // Fallback to first tab if biomarkers tab not found\n            if (this.tabLinks.length > 0) {\n                const firstLink = this.tabLinks[0];\n                const firstTabId = firstLink.getAttribute('href');\n                const firstContent = document.querySelector(firstTabId);\n                \n                if (firstContent) {\n                    firstLink.classList.add('my-story-tab-active');\n                    firstContent.classList.add('my-story-tab-active');\n                    firstContent.style.display = 'block';\n                    \n                    setTimeout(() => {\n                        firstContent.style.opacity = '1';\n                        firstContent.style.transform = 'translateY(0)';\n                    }, 50);\n                    \n                    this.activeTab = firstTabId.substring(1);\n                    console.log('MyStoryTabsManager: Fallback to first tab activated:', this.activeTab);\n                }\n            }\n        }\n    }\n    \n    setupEventListeners() {\n        console.log('MyStoryTabsManager: Setting up event listeners');\n        \n        this.tabLinks.forEach(link => {\n            link.addEventListener('click', (e) => {\n                e.preventDefault();\n                const targetId = link.getAttribute('href');\n                console.log('MyStoryTabsManager: Tab clicked:', targetId);\n                this.switchToTab(targetId);\n            });\n        });\n        \n        // Add keyboard navigation\n        this.tabContainer.addEventListener('keydown', (e) => {\n            if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n                e.preventDefault();\n                const direction = e.key === 'ArrowLeft' ? -1 : 1;\n                this.navigateToNextTab(direction);\n            }\n        });\n    }\n    \n    addAccessibilityAttributes() {\n        // Add ARIA attributes for accessibility\n        this.tabLinks.forEach((link, index) => {\n            const targetId = link.getAttribute('href').substring(1);\n            link.setAttribute('role', 'tab');\n            link.setAttribute('aria-controls', targetId);\n            link.setAttribute('aria-selected', link.classList.contains('my-story-tab-active'));\n            link.setAttribute('tabindex', link.classList.contains('my-story-tab-active') ? '0' : '-1');\n        });\n        \n        this.tabContents.forEach((content) => {\n            content.setAttribute('role', 'tabpanel');\n            content.setAttribute('aria-hidden', !content.classList.contains('my-story-tab-active'));\n        });\n        \n        // Add role to tab container\n        const tabList = this.tabContainer.querySelector('.my-story-tab-nav ul');\n        if (tabList) {\n            tabList.setAttribute('role', 'tablist');\n        }\n    }\n    \n    switchToTab(targetId) {\n        console.log('MyStoryTabsManager: switchToTab called with:', targetId);\n        \n        if (!targetId.startsWith('#')) {\n            targetId = '#' + targetId;\n        }\n        \n        console.log('MyStoryTabsManager: Normalized targetId:', targetId);\n        \n        let targetContent = document.querySelector(targetId);\n        if (!targetContent) {\n            console.error('MyStoryTabsManager: Target content not found for:', targetId);\n            // Try alternative selector for symptoms tab\n            if (targetId === '#tab-my-symptoms') {\n                const altContent = document.querySelector('.my-story-tab-content[id*=\"symptoms\"]');\n                if (altContent) {\n                    console.log('MyStoryTabsManager: Found alternative symptoms content:', altContent);\n                    targetContent = altContent;\n                }\n            }\n            if (!targetContent) {\n                return;\n            }\n        }\n        \n        console.log('MyStoryTabsManager: Target content found:', targetContent);\n        \n        // Remove active class from all tabs and contents\n        this.tabLinks.forEach(link => {\n            link.classList.remove('my-story-tab-active');\n            link.setAttribute('aria-selected', 'false');\n            link.setAttribute('tabindex', '-1');\n        });\n        \n        this.tabContents.forEach(content => {\n            content.classList.remove('my-story-tab-active');\n            content.setAttribute('aria-hidden', 'true');\n            content.style.display = 'none';\n            content.style.opacity = '0';\n            content.style.transform = 'translateY(10px)';\n        });\n        \n        // Add active class to selected tab and content\n        const activeLink = this.tabContainer.querySelector(`a[href=\"${targetId}\"]`);\n        if (activeLink) {\n            console.log('MyStoryTabsManager: Active link found:', activeLink);\n            activeLink.classList.add('my-story-tab-active');\n            activeLink.setAttribute('aria-selected', 'true');\n            activeLink.setAttribute('tabindex', '0');\n        } else {\n            console.error('MyStoryTabsManager: Active link not found for:', targetId);\n            // Try to find link by text content for symptoms\n            if (targetId === '#tab-my-symptoms') {\n                const symptomsLink = Array.from(this.tabLinks).find(link => \n                    link.textContent.toLowerCase().includes('symptoms')\n                );\n                if (symptomsLink) {\n                    console.log('MyStoryTabsManager: Found symptoms link by text:', symptomsLink);\n                    symptomsLink.classList.add('my-story-tab-active');\n                    symptomsLink.setAttribute('aria-selected', 'true');\n                    symptomsLink.setAttribute('tabindex', '0');\n                }\n            }\n        }\n        \n        // Show target content\n        targetContent.classList.add('my-story-tab-active');\n        targetContent.setAttribute('aria-hidden', 'false');\n        targetContent.style.display = 'block';\n        \n        // Trigger animation\n        setTimeout(() => {\n            targetContent.style.opacity = '1';\n            targetContent.style.transform = 'translateY(0)';\n        }, 50);\n        \n        // Update active tab reference\n        this.activeTab = targetId.substring(1);\n        console.log('MyStoryTabsManager: Tab switched to:', this.activeTab);\n        \n        // Trigger custom event\n        this.triggerTabChangeEvent(targetId, activeLink, targetContent);\n        \n        // Special handling for symptoms tab\n        if (targetId === '#tab-my-symptoms') {\n            console.log('MyStoryTabsManager: Symptoms tab activated, updating symptoms display');\n            this.updateSymptomsDisplay();\n        }\n    }\n    \n    navigateToNextTab(direction) {\n        const currentIndex = Array.from(this.tabLinks).findIndex(link => \n            link.classList.contains('my-story-tab-active')\n        );\n        \n        if (currentIndex === -1) return;\n        \n        const newIndex = (currentIndex + direction + this.tabLinks.length) % this.tabLinks.length;\n        const newTab = this.tabLinks[newIndex];\n        \n        this.switchToTab(newTab.getAttribute('href'));\n    }\n    \n    triggerTabChangeEvent(targetId, activeLink, targetContent) {\n        // Custom event for tab changes\n        const event = new CustomEvent('tabChanged', {\n            detail: {\n                targetId: targetId,\n                activeLink: activeLink,\n                targetContent: targetContent\n            }\n        });\n        this.tabContainer.dispatchEvent(event);\n    }\n    \n    saveTabState() {\n        if (typeof localStorage !== 'undefined') {\n            localStorage.setItem('ennu-active-tab', this.activeTab);\n        }\n    }\n    \n    loadTabState() {\n        if (typeof localStorage !== 'undefined') {\n            const savedTab = localStorage.getItem('ennu-active-tab');\n            if (savedTab && this.tabContainer.querySelector(`a[href=\"#${savedTab}\"]`)) {\n                this.switchToTab('#' + savedTab);\n            }\n        }\n    }\n    \n    getActiveTab() {\n        return this.activeTab;\n    }\n    \n    getAllTabs() {\n        return Array.from(this.tabLinks).map(link => link.getAttribute('href').substring(1));\n    }\n\n    updateSymptomsDisplay() {\n        console.log('MyStoryTabsManager: Updating symptoms display');\n        \n        // Update symptom counts\n        const totalSymptomsEl = document.getElementById('total-symptoms-count');\n        const activeSymptomsEl = document.getElementById('active-symptoms-count');\n        const biomarkerCorrelationsEl = document.getElementById('biomarker-correlations');\n        const trendingSymptomsEl = document.getElementById('trending-symptoms');\n        \n        if (totalSymptomsEl) {\n            const symptomItems = document.querySelectorAll('.symptom-item');\n            totalSymptomsEl.textContent = symptomItems.length;\n        }\n        \n        if (activeSymptomsEl) {\n            const activeSymptomItems = document.querySelectorAll('.symptom-item.active');\n            activeSymptomsEl.textContent = activeSymptomItems.length;\n        }\n        \n        if (biomarkerCorrelationsEl) {\n            const biomarkerTags = document.querySelectorAll('.biomarker-tag');\n            biomarkerCorrelationsEl.textContent = biomarkerTags.length;\n        }\n        \n        if (trendingSymptomsEl) {\n            const trendingItems = document.querySelectorAll('.symptom-item.trending');\n            trendingSymptomsEl.textContent = trendingItems.length;\n        }\n        \n        console.log('MyStoryTabsManager: Symptoms display updated');\n    }\n}\n\n// Add CSS styles for My Story tabs\nfunction addMyStoryTabStyles() {\n    const style = document.createElement('style');\n    style.textContent = `\n        .my-story-tab-content {\n            display: none;\n            opacity: 0;\n            transform: translateY(10px);\n            transition: all 0.3s ease;\n        }\n        \n        .my-story-tab-content.my-story-tab-active {\n            display: block;\n            opacity: 1;\n            transform: translateY(0);\n        }\n    `;\n    document.head.appendChild(style);\n}\n\n// Add the styles when the script loads\naddMyStoryTabStyles();\n\n/**\n * Upload Lab Results Function\n * Handles lab result upload functionality\n */\nfunction uploadLabResults() {\n    // Create a modal or redirect to upload page\n    const uploadUrl = '/lab-upload/'; // Replace with actual upload URL\n    if (confirm('Would you like to upload your lab results? You will be redirected to the upload page.')) {\n        window.location.href = uploadUrl;\n    }\n}\n\n/**\n * Schedule Lab Test Function\n * Handles lab test scheduling functionality\n */\nfunction scheduleLabTest() {\n    // Create a modal or redirect to scheduling page\n    const scheduleUrl = '/schedule-lab-test/'; // Replace with actual scheduling URL\n    if (confirm('Would you like to schedule a lab test? You will be redirected to the scheduling page.')) {\n        window.location.href = scheduleUrl;\n    }\n}\n\n/**\n * View Biomarker Guide Function\n * Shows biomarker guide and information\n */\nfunction viewBiomarkerGuide() {\n    // Create a modal with biomarker guide\n    const guideUrl = '/biomarker-guide/'; // Replace with actual guide URL\n    if (confirm('Would you like to view the biomarker guide? You will be redirected to the guide page.')) {\n        window.location.href = guideUrl;\n    }\n}\n\n/**\n * View Biomarker Details Function\n * Shows detailed information for a specific biomarker\n * @param {string} biomarker - The biomarker identifier\n */\nfunction viewBiomarkerDetails(biomarker) {\n    // Create a modal with biomarker details\n    const detailsUrl = `/biomarker-details/${biomarker}/`; // Replace with actual details URL\n    if (confirm(`Would you like to view detailed information for ${biomarker}? You will be redirected to the details page.`)) {\n        window.location.href = detailsUrl;\n    }\n}\n\n/**\n * Update Biomarker Function\n * Allows users to update biomarker values\n * @param {string} biomarker - The biomarker identifier\n */\nfunction updateBiomarker(biomarker) {\n    // Create a modal for updating biomarker values\n    const updateUrl = `/update-biomarker/${biomarker}/`; // Replace with actual update URL\n    if (confirm(`Would you like to update the value for ${biomarker}? You will be redirected to the update page.`)) {\n        window.location.href = updateUrl;\n    }\n}\n\n/**\n * Master toggle function for all biomarker panels\n */\nfunction toggleAllBiomarkerPanels() {\n    const containers = document.querySelectorAll('.biomarker-measurement-container');\n    const listItems = document.querySelectorAll('.biomarker-list-item');\n    const toggleBtn = document.querySelector('.master-toggle-btn');\n    const toggleIcon = toggleBtn.querySelector('.toggle-icon');\n    const toggleText = toggleBtn.querySelector('.toggle-text');\n    \n    const allExpanded = Array.from(containers).every(container => \n        container.style.display === 'block' || container.style.display === ''\n    );\n    \n    if (allExpanded) {\n        // Collapse all\n        containers.forEach(container => container.style.display = 'none');\n        listItems.forEach(item => {\n            item.classList.remove('expanded');\n            const expandIcon = item.querySelector('.biomarker-list-expand');\n            if (expandIcon) expandIcon.textContent = '▶';\n        });\n        toggleIcon.textContent = '▶';\n        toggleText.textContent = 'Expand All Panels';\n    } else {\n        // Expand all\n        containers.forEach(container => container.style.display = 'block');\n        listItems.forEach(item => {\n            item.classList.add('expanded');\n            const expandIcon = item.querySelector('.biomarker-list-expand');\n            if (expandIcon) expandIcon.textContent = '▼';\n        });\n        toggleIcon.textContent = '▼';\n        toggleText.textContent = 'Collapse All Panels';\n    }\n}\n\n/**\n * Panel-specific toggle function\n * @param {string} panelKey - The key of the panel (e.g., 'blood', 'urine')\n */\nfunction toggleBiomarkerPanel(panelKey) {\n    const panel = document.querySelector(`.biomarker-panel-${panelKey}`);\n    const containers = panel.querySelectorAll('.biomarker-measurement-container');\n    const listItems = panel.querySelectorAll('.biomarker-list-item');\n    \n    const allExpanded = Array.from(containers).every(container => \n        container.style.display === 'block' || container.style.display === ''\n    );\n    \n    if (allExpanded) {\n        // Collapse panel\n        containers.forEach(container => container.style.display = 'none');\n        listItems.forEach(item => {\n            item.classList.remove('expanded');\n            const expandIcon = item.querySelector('.biomarker-list-expand');\n            if (expandIcon) expandIcon.textContent = '▶';\n        });\n    } else {\n        // Expand panel\n        containers.forEach(container => container.style.display = 'block');\n        listItems.forEach(item => {\n            item.classList.add('expanded');\n            const expandIcon = item.querySelector('.biomarker-list-expand');\n            if (expandIcon) expandIcon.textContent = '▼';\n        });\n    }\n}\n\n/**\n * Main Dashboard Class\n * Handles all dashboard functionality\n */\nclass ENNUDashboard {\n\tconstructor(dashboardElement) {\n\t\tthis.dashboard = dashboardElement;\n\t\tthis.dashboard.ennuDashboard = this; // Store reference for global access\n\t\t\n\t\t// Initialize chart instances storage\n\t\tthis.chartInstances = {\n\t\t\tscoreHistory: null,\n\t\t\tbmiHistory: null\n\t\t};\n\t\t\n\t\tthis.init();\n\t}\n\n\tinitThemeToggle() {\n\t\tconst themeToggle = this.dashboard.querySelector('#theme-toggle');\n\t\tif (!themeToggle) return;\n\n\t\t// Always start with light mode on every page refresh\n\t\t// Clear any saved theme preference to ensure fresh start\n\t\tlocalStorage.removeItem('ennu-theme');\n\t\t\n\t\t// Force light mode for every session\n\t\tthis.setTheme('light');\n\n\t\tthemeToggle.addEventListener('click', () => {\n\t\t\tconst currentTheme = this.dashboard.getAttribute('data-theme') || 'light';\n\t\t\tconst newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n\t\t\tthis.setTheme(newTheme);\n\t\t});\n\t}\n\n\tsetTheme(theme) {\n\t\tthis.dashboard.setAttribute('data-theme', theme);\n\t\t// Do not save theme preference - always start fresh with light mode\n\t\t// localStorage.setItem('ennu-theme', theme);\n\t\t\n\t\t// Update toggle position (light mode = 0, dark mode = 30px)\n\t\tconst toggleThumb = this.dashboard.querySelector('.toggle-thumb');\n\t\tif (toggleThumb) {\n\t\t\tif (theme === 'light') {\n\t\t\t\ttoggleThumb.style.transform = 'translateX(0)';\n\t\t\t} else {\n\t\t\t\ttoggleThumb.style.transform = 'translateX(30px)';\n\t\t\t}\n\t\t}\n\t}\n\n\tinitToggleAll() {\n\t\tconst toggleAllBtn = this.dashboard.querySelector('#toggle-all-accordions');\n\t\tif (!toggleAllBtn) return;\n\n\t\ttoggleAllBtn.addEventListener('click', () => {\n\t\t\tconst accordionItems = this.dashboard.querySelectorAll('.accordion-item');\n\t\t\tconst allOpen = Array.from(accordionItems).every(item => item.classList.contains('open'));\n\t\t\t\n\t\t\taccordionItems.forEach(item => {\n\t\t\t\tif (allOpen) {\n\t\t\t\t\titem.classList.remove('open');\n\t\t\t\t} else {\n\t\t\t\t\titem.classList.add('open');\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\ttoggleAllBtn.textContent = allOpen ? 'Expand All' : 'Collapse All';\n\t\t});\n\t}\n\n\tinitHealthMapAccordion() {\n\t\tconst accordionItems = this.dashboard.querySelectorAll('.accordion-item');\n\t\t\n\t\taccordionItems.forEach(item => {\n\t\t\tconst header = item.querySelector('.accordion-header');\n\t\t\tif (!header) return;\n\n\t\t\theader.addEventListener('click', () => {\n\t\t\t\titem.classList.toggle('open');\n\t\t\t});\n\n\t\t\t// Keyboard support\n\t\t\theader.addEventListener('keydown', (e) => {\n\t\t\t\tif (e.key === 'Enter' || e.key === ' ') {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\titem.classList.toggle('open');\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tinitDetailsToggle() {\n\t\tconst toggleButtons = this.dashboard.querySelectorAll('.view-details-toggle');\n\t\t\n\t\ttoggleButtons.forEach(button => {\n\t\t\tbutton.addEventListener('click', () => {\n\t\t\t\tconst listItem = button.closest('.assessment-list-item');\n\t\t\t\tconst detailsContainer = listItem.querySelector('.category-details-container');\n\t\t\t\t\n\t\t\t\tif (detailsContainer) {\n\t\t\t\t\tconst isExpanded = listItem.getAttribute('aria-expanded') === 'true';\n\t\t\t\t\tlistItem.setAttribute('aria-expanded', !isExpanded);\n\t\t\t\t\t\n\t\t\t\t\tif (!isExpanded) {\n\t\t\t\t\t\tdetailsContainer.style.display = 'block';\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tdetailsContainer.style.opacity = '1';\n\t\t\t\t\t\t\tdetailsContainer.style.transform = 'translateY(0)';\n\t\t\t\t\t\t}, 10);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdetailsContainer.style.opacity = '0';\n\t\t\t\t\t\tdetailsContainer.style.transform = 'translateY(-10px)';\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tdetailsContainer.style.display = 'none';\n\t\t\t\t\t\t}, 300);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tinitContextualText() {\n\t\tconst contextualText = this.dashboard.querySelector('#contextual-text');\n\t\tconst mainScoreOrb = this.dashboard.querySelector('.main-score-orb');\n\t\t\n\t\tif (!contextualText || !mainScoreOrb) return;\n\n\t\tconst insights = {\n\t\t\t'0-3': 'Your ENNU Life Score indicates significant opportunities for health optimization. Focus on completing assessments and implementing foundational lifestyle changes.',\n\t\t\t'3-5': 'You\\'re making progress! Continue with your health journey by completing more assessments and following personalized recommendations.',\n\t\t\t'5-7': 'Great work! Your health foundation is solid. Focus on fine-tuning specific areas and maintaining consistency.',\n\t\t\t'7-9': 'Excellent! You\\'re approaching optimal health. Continue your current practices and explore advanced optimization strategies.',\n\t\t\t'9-10': 'Outstanding! You\\'ve achieved exceptional health optimization. Maintain your practices and consider becoming a health mentor.'\n\t\t};\n\n\t\tconst updateContextualText = () => {\n\t\t\tconst score = parseFloat(mainScoreOrb.getAttribute('data-score') || 0);\n\t\t\tlet insight = insights['0-3'];\n\t\t\t\n\t\t\tif (score >= 9) insight = insights['9-10'];\n\t\t\telse if (score >= 7) insight = insights['7-9'];\n\t\t\telse if (score >= 5) insight = insights['5-7'];\n\t\t\telse if (score >= 3) insight = insights['3-5'];\n\t\t\t\n\t\t\tcontextualText.textContent = insight;\n\t\t};\n\n\t\t// Update on hover\n\t\tmainScoreOrb.addEventListener('mouseenter', () => {\n\t\t\tupdateContextualText();\n\t\t\tcontextualText.classList.add('visible');\n\t\t});\n\n\t\tmainScoreOrb.addEventListener('mouseleave', () => {\n\t\t\tcontextualText.classList.remove('visible');\n\t\t});\n\n\t\t// Initial update\n\t\tupdateContextualText();\n\t}\n\n\tinitScoreAnimation() {\n\t\tconst mainScoreOrb = this.dashboard.querySelector('.main-score-orb');\n\t\tif (!mainScoreOrb) return;\n\n\t\tconst targetScore = parseFloat(mainScoreOrb.getAttribute('data-score') || 0);\n\t\tconst scoreElement = mainScoreOrb.querySelector('.main-score-value');\n\t\t\n\t\tif (!scoreElement) return;\n\n\t\tlet currentScore = 0;\n\t\tconst duration = 2000; // 2 seconds\n\t\tconst startTime = performance.now();\n\n\t\tconst step = (timestamp) => {\n\t\t\tconst elapsed = timestamp - startTime;\n\t\t\tconst progress = Math.min(elapsed / duration, 1);\n\t\t\t\n\t\t\t// Easing function for smooth animation\n\t\t\tconst easeOutQuart = 1 - Math.pow(1 - progress, 4);\n\t\t\tcurrentScore = targetScore * easeOutQuart;\n\t\t\t\n\t\t\tscoreElement.textContent = currentScore.toFixed(1);\n\t\t\t\n\t\t\tif (progress < 1) {\n\t\t\t\trequestAnimationFrame(step);\n\t\t\t} else {\n\t\t\t\tmainScoreOrb.classList.add('loaded');\n\t\t\t}\n\t\t};\n\n\t\trequestAnimationFrame(step);\n\t}\n\n\tinitPillarAnimation() {\n\t\tconst pillarOrbs = this.dashboard.querySelectorAll('.pillar-orb');\n\t\t\n\t\tpillarOrbs.forEach((orb, index) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\torb.classList.add('visible');\n\t\t\t}, index * 200);\n\t\t});\n\t}\n\n\tinitHistoricalCharts() {\n\t\tconsole.log('ENNU Dashboard: Initializing historical charts...');\n\t\tconsole.log('ENNU Dashboard: Chart.js available:', typeof Chart !== 'undefined');\n\t\tconsole.log('ENNU Dashboard: Chart.js version:', typeof Chart !== 'undefined' ? Chart.version : 'Not loaded');\n\t\t\n\t\t// Check if Chart.js is available\n\t\tif (typeof Chart === 'undefined') {\n\t\t\tconsole.error('ENNU Dashboard: Chart.js is not loaded');\n\t\t\tthis.showChartError('Chart.js library is not available. Please refresh the page and try again.');\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if time adapter is available\n\t\tif (typeof Chart.adapters === 'undefined' || typeof Chart.adapters.date === 'undefined') {\n\t\t\tconsole.warn('ENNU Dashboard: Chart.js time adapter not available, charts may not display correctly');\n\t\t}\n\n\t\t// Check if we're in a logged-in state by looking for chart containers\n\t\tconst chartContainers = document.querySelectorAll('.chart-wrapper');\n\t\tif (chartContainers.length === 0) {\n\t\t\tconsole.log('ENNU Dashboard: No chart containers found - user may not be logged in or dashboard not fully loaded');\n\t\t\treturn;\n\t\t}\n\n\t\t// Initialize charts with real data\n\t\tthis.initScoreHistoryChart();\n\t\tthis.initBMIHistoryChart();\n\t\t\n\t\t// Set up chart refresh on tab show\n\t\tthis.setupChartRefreshOnTabShow();\n\t}\n\n\tinitScoreHistoryChart() {\n\t\tconsole.log('ENNU Dashboard: Initializing score history chart...');\n\t\tconst scoreCtx = this.dashboard.querySelector('#scoreHistoryChart');\n\t\tif (!scoreCtx) {\n\t\t\tconsole.error('ENNU Dashboard: Score history chart canvas not found - user may not be logged in');\n\t\t\tthis.showChartError('Score history chart not available. Please log in to view your health trends.');\n\t\t\treturn;\n\t\t}\n\n\t\t// Destroy existing chart instance if it exists\n\t\tif (this.chartInstances.scoreHistory) {\n\t\t\tconsole.log('ENNU Dashboard: Destroying existing score history chart');\n\t\t\tthis.chartInstances.scoreHistory.destroy();\n\t\t\tthis.chartInstances.scoreHistory = null;\n\t\t}\n\n\t\t// Get real user score data\n\t\tconst scoreData = this.getUserScoreData();\n\t\tconsole.log('ENNU Dashboard: Score data received:', scoreData);\n\n\t\tif (scoreData && scoreData.length > 0) {\n\t\t\tconsole.log('ENNU Dashboard: Creating chart with data length:', scoreData.length);\n\t\t\ttry {\n\t\t\t\tconst chartConfig = {\n\t\t\t\t\ttype: 'line',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tlabels: scoreData.map(d => new Date(d.date)), // Use proper Date objects for time scale\n\t\t\t\t\t\tdatasets: [{\n\t\t\t\t\t\t\tlabel: 'ENNU Life Score',\n\t\t\t\t\t\t\tdata: scoreData.map(d => d.score),\n\t\t\t\t\t\t\tborderColor: '#10b981',\n\t\t\t\t\t\t\tbackgroundColor: 'rgba(16, 185, 129, 0.1)',\n\t\t\t\t\t\t\tborderWidth: 3,\n\t\t\t\t\t\t\tfill: true,\n\t\t\t\t\t\t\ttension: 0.4,\n\t\t\t\t\t\t\tpointBackgroundColor: '#10b981',\n\t\t\t\t\t\t\tpointBorderColor: '#ffffff',\n\t\t\t\t\t\t\tpointBorderWidth: 2,\n\t\t\t\t\t\t\tpointRadius: 6,\n\t\t\t\t\t\t\tpointHoverRadius: 8\n\t\t\t\t\t\t}]\n\t\t\t\t\t},\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tresponsive: true,\n\t\t\t\t\t\tmaintainAspectRatio: false,\n\t\t\t\t\t\tinteraction: {\n\t\t\t\t\t\t\tintersect: false,\n\t\t\t\t\t\t\tmode: 'index',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tscales: {\n\t\t\t\t\t\t\tx: { \n\t\t\t\t\t\t\t\ttype: 'time', \n\t\t\t\t\t\t\t\ttime: { \n\t\t\t\t\t\t\t\t\tunit: scoreData.length > 30 ? 'week' : 'day',\n\t\t\t\t\t\t\t\t\tdisplayFormats: {\n\t\t\t\t\t\t\t\t\t\tday: 'MMM d',\n\t\t\t\t\t\t\t\t\t\tweek: 'MMM d'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}, \n\t\t\t\t\t\t\t\tgrid: { color: 'rgba(255, 255, 255, 0.1)' }, \n\t\t\t\t\t\t\t\tticks: { \n\t\t\t\t\t\t\t\t\tcolor: 'rgba(255, 255, 255, 0.7)',\n\t\t\t\t\t\t\t\t\tfont: {\n\t\t\t\t\t\t\t\t\t\tsize: 12\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ty: { \n\t\t\t\t\t\t\t\tbeginAtZero: false,\n\t\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\t\tmax: 10,\n\t\t\t\t\t\t\t\tgrid: { color: 'rgba(255, 255, 255, 0.1)' }, \n\t\t\t\t\t\t\t\tticks: { \n\t\t\t\t\t\t\t\t\tcolor: 'rgba(255, 255, 255, 0.7)',\n\t\t\t\t\t\t\t\t\tfont: {\n\t\t\t\t\t\t\t\t\t\tsize: 12\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tplugins: { \n\t\t\t\t\t\t\tlegend: { display: false },\n\t\t\t\t\t\t\ttooltip: {\n\t\t\t\t\t\t\t\tbackgroundColor: 'rgba(0, 0, 0, 0.8)',\n\t\t\t\t\t\t\t\ttitleColor: '#fff',\n\t\t\t\t\t\t\t\tbodyColor: '#fff',\n\t\t\t\t\t\t\t\tborderColor: 'rgba(52, 211, 153, 0.5)',\n\t\t\t\t\t\t\t\tborderWidth: 1,\n\t\t\t\t\t\t\t\tcornerRadius: 8,\n\t\t\t\t\t\t\t\tdisplayColors: false,\n\t\t\t\t\t\t\t\tcallbacks: {\n\t\t\t\t\t\t\t\t\ttitle: function(context) {\n\t\t\t\t\t\t\t\t\t\treturn 'Score: ' + context[0].parsed.y.toFixed(1);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tlabel: function(context) {\n\t\t\t\t\t\t\t\t\t\t// Use original date for display but timestamp for positioning\n\t\t\t\t\t\t\t\t\t\tconst dataIndex = context.dataIndex;\n\t\t\t\t\t\t\t\t\t\tconst originalDate = scoreData[dataIndex]?.originalDate;\n\t\t\t\t\t\t\t\t\t\tconst displayDate = originalDate || new Date(context.parsed.x).toLocaleDateString();\n\t\t\t\t\t\t\t\t\t\treturn 'Date: ' + displayDate;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\tconsole.log('ENNU Dashboard: Chart config:', chartConfig);\n\t\t\t\t\n\t\t\t\tthis.chartInstances.scoreHistory = new Chart(scoreCtx, chartConfig);\n\t\t\t\tconsole.log('ENNU Dashboard: Score history chart initialized successfully');\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('ENNU Dashboard: Error initializing score history chart:', error);\n\t\t\t\tthis.showChartError('Failed to load score history chart');\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log('ENNU Dashboard: No score data available, showing empty state');\n\t\t\t// Show empty state for score chart\n\t\t\tthis.showEmptyChartState(scoreCtx, '📊', 'No Score Data', 'Complete assessments to see your score history');\n\t\t}\n\t}\n\n\tinitBMIHistoryChart() {\n\t\tconsole.log('ENNU Dashboard: Initializing BMI history chart...');\n\t\tconst bmiCtx = this.dashboard.querySelector('#bmiHistoryChart');\n\t\tif (!bmiCtx) {\n\t\t\tconsole.error('ENNU Dashboard: BMI history chart canvas not found - user may not be logged in');\n\t\t\tthis.showChartError('BMI history chart not available. Please log in to view your health trends.');\n\t\t\treturn;\n\t\t}\n\n\t\t// Destroy existing chart instance if it exists\n\t\tif (this.chartInstances.bmiHistory) {\n\t\t\tconsole.log('ENNU Dashboard: Destroying existing BMI history chart');\n\t\t\tthis.chartInstances.bmiHistory.destroy();\n\t\t\tthis.chartInstances.bmiHistory = null;\n\t\t}\n\n\t\t// Get real user BMI data\n\t\tconst bmiData = this.getUserBMIData();\n\t\tconsole.log('ENNU Dashboard: BMI data:', bmiData);\n\n\t\tif (bmiData && bmiData.length > 0) {\n\t\t\ttry {\n\t\t\t\tthis.chartInstances.bmiHistory = new Chart(bmiCtx, {\n\t\t\t\t\ttype: 'line',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tlabels: bmiData.map(d => new Date(d.date)), // Use proper Date objects for time scale\n\t\t\t\t\t\tdatasets: [{\n\t\t\t\t\t\t\tlabel: 'BMI',\n\t\t\t\t\t\t\tdata: bmiData.map(d => d.bmi),\n\t\t\t\t\t\t\tborderColor: '#3b82f6',\n\t\t\t\t\t\t\tbackgroundColor: 'rgba(59, 130, 246, 0.1)',\n\t\t\t\t\t\t\tborderWidth: 3,\n\t\t\t\t\t\t\tfill: true,\n\t\t\t\t\t\t\ttension: 0.4,\n\t\t\t\t\t\t\tpointBackgroundColor: '#3b82f6',\n\t\t\t\t\t\t\tpointBorderColor: '#ffffff',\n\t\t\t\t\t\t\tpointBorderWidth: 2,\n\t\t\t\t\t\t\tpointRadius: 6,\n\t\t\t\t\t\t\tpointHoverRadius: 8\n\t\t\t\t\t\t}]\n\t\t\t\t\t},\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tresponsive: true,\n\t\t\t\t\t\tmaintainAspectRatio: false,\n\t\t\t\t\t\tinteraction: {\n\t\t\t\t\t\t\tintersect: false,\n\t\t\t\t\t\t\tmode: 'index',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tscales: {\n\t\t\t\t\t\t\tx: { \n\t\t\t\t\t\t\t\ttype: 'time', \n\t\t\t\t\t\t\t\ttime: { \n\t\t\t\t\t\t\t\t\tunit: bmiData.length > 30 ? 'week' : 'day',\n\t\t\t\t\t\t\t\t\tdisplayFormats: {\n\t\t\t\t\t\t\t\t\t\tday: 'MMM d',\n\t\t\t\t\t\t\t\t\t\tweek: 'MMM d'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}, \n\t\t\t\t\t\t\t\tgrid: { color: 'rgba(255, 255, 255, 0.1)' }, \n\t\t\t\t\t\t\t\tticks: { \n\t\t\t\t\t\t\t\t\tcolor: 'rgba(255, 255, 255, 0.7)',\n\t\t\t\t\t\t\t\t\tfont: {\n\t\t\t\t\t\t\t\t\t\tsize: 12\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ty: { \n\t\t\t\t\t\t\t\tbeginAtZero: false,\n\t\t\t\t\t\t\t\tmin: 15,\n\t\t\t\t\t\t\t\tmax: 40,\n\t\t\t\t\t\t\t\tgrid: { color: 'rgba(255, 255, 255, 0.1)' }, \n\t\t\t\t\t\t\t\tticks: { \n\t\t\t\t\t\t\t\t\tcolor: 'rgba(255, 255, 255, 0.7)',\n\t\t\t\t\t\t\t\t\tfont: {\n\t\t\t\t\t\t\t\t\t\tsize: 12\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tplugins: { \n\t\t\t\t\t\t\tlegend: { display: false },\n\t\t\t\t\t\t\ttooltip: {\n\t\t\t\t\t\t\t\tbackgroundColor: 'rgba(0, 0, 0, 0.8)',\n\t\t\t\t\t\t\t\ttitleColor: '#fff',\n\t\t\t\t\t\t\t\tbodyColor: '#fff',\n\t\t\t\t\t\t\t\tborderColor: 'rgba(59, 130, 246, 0.5)',\n\t\t\t\t\t\t\t\tborderWidth: 1,\n\t\t\t\t\t\t\t\tcornerRadius: 8,\n\t\t\t\t\t\t\t\tdisplayColors: false,\n\t\t\t\t\t\t\t\tcallbacks: {\n\t\t\t\t\t\t\t\t\ttitle: function(context) {\n\t\t\t\t\t\t\t\t\t\treturn 'BMI: ' + context[0].parsed.y.toFixed(1);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tlabel: function(context) {\n\t\t\t\t\t\t\t\t\t\t// Use original date for display but timestamp for positioning\n\t\t\t\t\t\t\t\t\t\tconst dataIndex = context.dataIndex;\n\t\t\t\t\t\t\t\t\t\tconst originalDate = bmiData[dataIndex]?.originalDate;\n\t\t\t\t\t\t\t\t\t\tconst displayDate = originalDate || new Date(context.parsed.x).toLocaleDateString();\n\t\t\t\t\t\t\t\t\t\treturn 'Date: ' + displayDate;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tconsole.log('ENNU Dashboard: BMI history chart initialized successfully');\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('ENNU Dashboard: Error initializing BMI history chart:', error);\n\t\t\t\tthis.showChartError('Failed to load BMI history chart');\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.log('ENNU Dashboard: No BMI data available, showing empty state');\n\t\t\t// Show empty state for BMI chart\n\t\t\tthis.showEmptyChartState(bmiCtx, '⚖️', 'No BMI Data', 'Add your height and weight to see BMI trends');\n\t\t}\n\t}\n\n\t// Enhanced method to setup chart refresh when My Trends tab is shown\n\tsetupChartRefreshOnTabShow() {\n\t\tconsole.log('ENNU Dashboard: Setting up chart refresh on tab show...');\n\t\t\n\t\t// Listen for tab changes to refresh charts\n\t\tconst trendsTab = document.querySelector('a[href=\"#tab-my-trends\"]');\n\t\tif (trendsTab) {\n\t\t\ttrendsTab.addEventListener('click', () => {\n\t\t\t\tconsole.log('ENNU Dashboard: My Trends tab clicked, refreshing charts...');\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t// Check if charts exist and reinitialize if needed\n\t\t\t\t\tif (!this.chartInstances.scoreHistory) {\n\t\t\t\t\t\tconsole.log('ENNU Dashboard: Reinitializing score history chart...');\n\t\t\t\t\t\tthis.initScoreHistoryChart();\n\t\t\t\t\t}\n\t\t\t\t\tif (!this.chartInstances.bmiHistory) {\n\t\t\t\t\t\tconsole.log('ENNU Dashboard: Reinitializing BMI history chart...');\n\t\t\t\t\t\tthis.initBMIHistoryChart();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Update charts with fresh data\n\t\t\t\t\tthis.updateCharts();\n\t\t\t\t}, 200); // Increased delay to ensure tab is fully shown\n\t\t\t});\n\t\t}\n\t\t\n\t\t// Also listen for tab changes via the tab manager\n\t\tdocument.addEventListener('tabChanged', (event) => {\n\t\t\tif (event.detail && event.detail.targetId === 'tab-my-trends') {\n\t\t\t\tconsole.log('ENNU Dashboard: My Trends tab shown via tab manager, refreshing charts...');\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.reinitializeCharts();\n\t\t\t\t}, 300);\n\t\t\t}\n\t\t});\n\t}\n\n\t// Helper method to get real user score data\n\tgetUserScoreData() {\n\t\ttry {\n\t\t\tconsole.log('ENNU Dashboard: getUserScoreData() called');\n\t\t\tconsole.log('ENNU Dashboard: dashboardData available:', typeof dashboardData !== 'undefined');\n\t\t\t\n\t\t\t// Use data passed from PHP via wp_localize_script\n\t\t\tif (typeof dashboardData !== 'undefined' && dashboardData.score_history && dashboardData.score_history.length > 0) {\n\t\t\t\tconsole.log('ENNU Dashboard: Using server-provided score history data:', dashboardData.score_history);\n\t\t\t\t\n\t\t\t\t// Convert the data to the format expected by Chart.js\n\t\t\t\tconst scoreData = dashboardData.score_history.map(entry => ({\n\t\t\t\t\tdate: new Date(entry.date).toISOString(),\n\t\t\t\t\tscore: parseFloat(entry.score),\n\t\t\t\t\toriginalDate: entry.date\n\t\t\t\t}));\n\t\t\t\t\n\t\t\t\tconsole.log('ENNU Dashboard: Converted score data:', scoreData);\n\t\t\t\t\n\t\t\t\t// Sort by date\n\t\t\t\tscoreData.sort((a, b) => new Date(a.date) - new Date(b.date));\n\t\t\t\t\n\t\t\t\tconsole.log('ENNU Dashboard: Final sorted score data:', scoreData);\n\t\t\t\treturn scoreData;\n\t\t\t} else {\n\t\t\t\tconsole.log('ENNU Dashboard: No server data available, dashboardData:', dashboardData);\n\t\t\t}\n\t\t\t\n\t\t\t// Fallback: Get current user score from data attribute or fallback to page content\n\t\t\tlet currentScore = 0;\n\t\t\tconst scoreElement = document.querySelector('[data-current-score]');\n\t\t\tif (scoreElement) {\n\t\t\t\tcurrentScore = parseFloat(scoreElement.dataset.currentScore) || 0;\n\t\t\t} else {\n\t\t\t\t// Fallback: try to find score in the page content\n\t\t\t\tconst scoreText = document.querySelector('.stat-value')?.textContent;\n\t\t\t\tif (scoreText) {\n\t\t\t\t\tcurrentScore = parseFloat(scoreText) || 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tconsole.log('ENNU Dashboard: Current score from DOM:', currentScore);\n\t\t\t\n\t\t\t// Get assessment scores from the page data\n\t\t\tconst assessmentCards = document.querySelectorAll('.assessment-trend-card');\n\t\t\tconst scoreData = [];\n\t\t\tlet pointCounter = 0; // Counter to ensure unique timestamps\n\t\t\t\n\t\t\tconsole.log('ENNU Dashboard: Found assessment cards:', assessmentCards.length);\n\t\t\t\n\t\t\tassessmentCards.forEach((card, index) => {\n\t\t\t\tconst scoreElement = card.querySelector('.score-value');\n\t\t\t\tconst dateElement = card.querySelector('.assessment-date');\n\t\t\t\t\n\t\t\t\tif (scoreElement && dateElement) {\n\t\t\t\t\tconst score = parseFloat(scoreElement.textContent);\n\t\t\t\t\tconst dateText = dateElement.textContent;\n\t\t\t\t\t\n\t\t\t\t\tconsole.log(`ENNU Dashboard: Assessment ${index}: score=${score}, date=${dateText}`);\n\t\t\t\t\t\n\t\t\t\t\t// Convert date text to actual date\n\t\t\t\t\tlet date;\n\t\t\t\t\tif (dateText === 'Recent') {\n\t\t\t\t\t\tdate = new Date();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdate = new Date(dateText);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Add to data array if valid\n\t\t\t\t\tif (!isNaN(score) && !isNaN(date.getTime())) {\n\t\t\t\t\t\t// Add minutes to ensure unique timestamps for same-day updates\n\t\t\t\t\t\tconst uniqueDate = new Date(date.getTime() + (pointCounter * 60000)); // Add minutes\n\t\t\t\t\t\tscoreData.push({\n\t\t\t\t\t\t\tdate: uniqueDate.toISOString(),\n\t\t\t\t\t\t\tscore: score,\n\t\t\t\t\t\t\toriginalDate: date.toISOString().split('T')[0] // Keep original date for display\n\t\t\t\t\t\t});\n\t\t\t\t\t\tpointCounter++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// If no assessment data, use current score\n\t\t\tif (scoreData.length === 0 && currentScore > 0) {\n\t\t\t\tconsole.log('ENNU Dashboard: Using current score as fallback');\n\t\t\t\tscoreData.push({\n\t\t\t\t\tdate: new Date().toISOString(),\n\t\t\t\t\tscore: currentScore,\n\t\t\t\t\toriginalDate: new Date().toISOString().split('T')[0]\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// If still no data, create sample data for demonstration\n\t\t\tif (scoreData.length === 0) {\n\t\t\t\tconsole.log('ENNU Dashboard: No score data found, creating sample data for demonstration');\n\t\t\t\t// Create 7 days of sample data with realistic progression\n\t\t\t\tconst baseScore = 6.5;\n\t\t\t\tfor (let i = 6; i >= 0; i--) {\n\t\t\t\t\tconst date = new Date();\n\t\t\t\t\tdate.setDate(date.getDate() - i);\n\t\t\t\t\tconst variation = (Math.random() - 0.5) * 2; // ±1 point variation\n\t\t\t\t\tconst score = Math.max(0, Math.min(10, baseScore + variation));\n\t\t\t\t\t\n\t\t\t\t\tscoreData.push({\n\t\t\t\t\t\tdate: date.toISOString(),\n\t\t\t\t\t\tscore: parseFloat(score.toFixed(1)),\n\t\t\t\t\t\toriginalDate: date.toISOString().split('T')[0],\n\t\t\t\t\t\tisSample: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Sort by timestamp (not original date)\n\t\t\tscoreData.sort((a, b) => new Date(a.date) - new Date(b.date));\n\t\t\t\n\t\t\tconsole.log('ENNU Dashboard: Final score data:', scoreData);\n\t\t\treturn scoreData;\n\t\t} catch (error) {\n\t\t\tconsole.error('ENNU Dashboard: Error getting user score data:', error);\n\t\t\t// Return sample data as fallback\n\t\t\treturn [{\n\t\t\t\tdate: new Date().toISOString(),\n\t\t\t\tscore: 7.5,\n\t\t\t\toriginalDate: new Date().toISOString().split('T')[0],\n\t\t\t\tisSample: true\n\t\t\t}];\n\t\t}\n\t}\n\n\t// Helper method to get real user BMI data\n\tgetUserBMIData() {\n\t\ttry {\n\t\t\t// Use data passed from PHP via wp_localize_script\n\t\t\tif (typeof dashboardData !== 'undefined' && dashboardData.bmi_history && dashboardData.bmi_history.length > 0) {\n\t\t\t\tconsole.log('ENNU Dashboard: Using server-provided BMI history data:', dashboardData.bmi_history);\n\t\t\t\t\n\t\t\t\t// Convert the data to the format expected by Chart.js\n\t\t\t\tconst bmiData = dashboardData.bmi_history.map(entry => ({\n\t\t\t\t\tdate: new Date(entry.date).toISOString(),\n\t\t\t\t\tbmi: parseFloat(entry.bmi),\n\t\t\t\t\toriginalDate: entry.date\n\t\t\t\t}));\n\t\t\t\t\n\t\t\t\t// Sort by date\n\t\t\t\tbmiData.sort((a, b) => new Date(a.date) - new Date(b.date));\n\t\t\t\t\n\t\t\t\treturn bmiData;\n\t\t\t}\n\t\t\t\n\t\t\t// Fallback: Get BMI data from biomarker measurements on the page\n\t\t\tconst bmiMeasurements = document.querySelectorAll('[data-biomarker=\"bmi\"] .biomarker-measurement');\n\t\t\tconst bmiData = [];\n\t\t\tlet pointCounter = 0; // Counter to ensure unique timestamps\n\t\t\t\n\t\t\tbmiMeasurements.forEach((measurement) => {\n\t\t\t\tconst valueElement = measurement.querySelector('.biomarker-current-value');\n\t\t\t\tconst dateElement = measurement.querySelector('.biomarker-date');\n\t\t\t\t\n\t\t\t\tif (valueElement && dateElement) {\n\t\t\t\t\tconst bmi = parseFloat(valueElement.textContent);\n\t\t\t\t\tconst dateText = dateElement.textContent;\n\t\t\t\t\t\n\t\t\t\t\t// Convert relative time to actual date\n\t\t\t\t\tlet date = new Date();\n\t\t\t\t\tif (dateText.includes('ago')) {\n\t\t\t\t\t\t// Parse relative time like \"2 days ago\"\n\t\t\t\t\t\tconst match = dateText.match(/(\\d+)\\s+(day|days|hour|hours|minute|minutes)\\s+ago/);\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\tconst amount = parseInt(match[1]);\n\t\t\t\t\t\t\tconst unit = match[2];\n\t\t\t\t\t\t\tif (unit.includes('day')) {\n\t\t\t\t\t\t\t\tdate.setDate(date.getDate() - amount);\n\t\t\t\t\t\t\t} else if (unit.includes('hour')) {\n\t\t\t\t\t\t\t\tdate.setHours(date.getHours() - amount);\n\t\t\t\t\t\t\t} else if (unit.includes('minute')) {\n\t\t\t\t\t\t\t\tdate.setMinutes(date.getMinutes() - amount);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Add to data array if valid\n\t\t\t\t\tif (!isNaN(bmi)) {\n\t\t\t\t\t\t// Add minutes to ensure unique timestamps for same-day updates\n\t\t\t\t\t\tconst uniqueDate = new Date(date.getTime() + (pointCounter * 60000)); // Add minutes\n\t\t\t\t\t\tbmiData.push({\n\t\t\t\t\t\t\tdate: uniqueDate.toISOString(),\n\t\t\t\t\t\t\tbmi: bmi,\n\t\t\t\t\t\t\toriginalDate: date.toISOString().split('T')[0] // Keep original date for display\n\t\t\t\t\t\t});\n\t\t\t\t\t\tpointCounter++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// If no BMI measurements found, try to get from profile info\n\t\t\tif (bmiData.length === 0) {\n\t\t\t\tconst bmiInfoElement = document.querySelector('.info-item .info-value');\n\t\t\t\tif (bmiInfoElement) {\n\t\t\t\t\tconst bmiText = bmiInfoElement.textContent;\n\t\t\t\t\tconst bmi = parseFloat(bmiText);\n\t\t\t\t\tif (!isNaN(bmi)) {\n\t\t\t\t\t\tbmiData.push({\n\t\t\t\t\t\t\tdate: new Date().toISOString(),\n\t\t\t\t\t\t\tbmi: bmi,\n\t\t\t\t\t\t\toriginalDate: new Date().toISOString().split('T')[0]\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// If still no data, create sample data for demonstration\n\t\t\tif (bmiData.length === 0) {\n\t\t\t\tconsole.log('ENNU Dashboard: No BMI data found, creating sample data for demonstration');\n\t\t\t\t// Create 7 days of sample BMI data with realistic progression\n\t\t\t\tconst baseBMI = 24.5;\n\t\t\t\tfor (let i = 6; i >= 0; i--) {\n\t\t\t\t\tconst date = new Date();\n\t\t\t\t\tdate.setDate(date.getDate() - i);\n\t\t\t\t\tconst variation = (Math.random() - 0.5) * 0.8; // ±0.4 BMI variation\n\t\t\t\t\tconst bmi = Math.max(18, Math.min(35, baseBMI + variation));\n\t\t\t\t\t\n\t\t\t\t\tbmiData.push({\n\t\t\t\t\t\tdate: date.toISOString(),\n\t\t\t\t\t\tbmi: parseFloat(bmi.toFixed(1)),\n\t\t\t\t\t\toriginalDate: date.toISOString().split('T')[0],\n\t\t\t\t\t\tisSample: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Sort by timestamp (not original date)\n\t\t\tbmiData.sort((a, b) => new Date(a.date) - new Date(b.date));\n\t\t\t\n\t\t\treturn bmiData;\n\t\t} catch (error) {\n\t\t\tconsole.error('ENNU Dashboard: Error getting user BMI data:', error);\n\t\t\t// Return sample data as fallback\n\t\t\treturn [{\n\t\t\t\tdate: new Date().toISOString(),\n\t\t\t\tbmi: 24.5,\n\t\t\t\toriginalDate: new Date().toISOString().split('T')[0],\n\t\t\t\tisSample: true\n\t\t\t}];\n\t\t}\n\t}\n\n\t// Helper method to show empty chart state\n\tshowEmptyChartState(canvas, icon, title, message) {\n\t\tconst wrapper = canvas.parentElement;\n\t\tif (wrapper) {\n\t\t\twrapper.innerHTML = `\n\t\t\t\t<div class=\"empty-state\" style=\"text-align: center; padding: 2rem; color: rgba(255, 255, 255, 0.7);\">\n\t\t\t\t\t<div class=\"empty-state-icon\" style=\"font-size: 3rem; margin-bottom: 1rem;\">${icon}</div>\n\t\t\t\t\t<h3 style=\"margin: 0 0 0.5rem 0; font-size: 1.1rem; font-weight: 600;\">${title}</h3>\n\t\t\t\t\t<p style=\"margin: 0; font-size: 0.9rem; opacity: 0.8;\">${message}</p>\n\t\t\t\t</div>\n\t\t\t`;\n\t\t}\n\t}\n\n\t// Helper method to show chart error\n\tshowChartError(message) {\n\t\tconsole.error('ENNU Dashboard: Chart error:', message);\n\t\tconst chartWrappers = document.querySelectorAll('.chart-wrapper');\n\t\tchartWrappers.forEach(wrapper => {\n\t\t\tif (!wrapper.querySelector('.empty-state') && !wrapper.querySelector('.chart-error')) {\n\t\t\t\twrapper.innerHTML = `\n\t\t\t\t\t<div class=\"chart-error\" style=\"text-align: center; padding: 2rem; color: #ef4444; background: rgba(239, 68, 68, 0.1); border-radius: 8px; border: 1px solid rgba(239, 68, 68, 0.3);\">\n\t\t\t\t\t\t<div class=\"error-icon\" style=\"font-size: 2rem; margin-bottom: 1rem;\">⚠️</div>\n\t\t\t\t\t\t<p style=\"margin: 0; font-size: 0.9rem; line-height: 1.4;\">${message}</p>\n\t\t\t\t\t\t<p style=\"margin: 0.5rem 0 0 0; font-size: 0.8rem; opacity: 0.8;\">If this issue persists, please contact support.</p>\n\t\t\t\t\t</div>\n\t\t\t\t`;\n\t\t\t}\n\t\t});\n\t}\n\n\t// Method to update charts with new data\n\tupdateCharts() {\n\t\tconsole.log('ENNU Dashboard: Updating charts with new data...');\n\t\t\n\t\t// Update score chart\n\t\tif (this.chartInstances.scoreHistory) {\n\t\t\tconst newScoreData = this.getUserScoreData();\n\t\t\tthis.chartInstances.scoreHistory.data.labels = newScoreData.map(d => new Date(d.date));\n\t\t\tthis.chartInstances.scoreHistory.data.datasets[0].data = newScoreData.map(d => d.score);\n\t\t\tthis.chartInstances.scoreHistory.update('none'); // Update without animation for immediate response\n\t\t}\n\t\t\n\t\t// Update BMI chart\n\t\tif (this.chartInstances.bmiHistory) {\n\t\t\tconst newBMIData = this.getUserBMIData();\n\t\t\tthis.chartInstances.bmiHistory.data.labels = newBMIData.map(d => new Date(d.date));\n\t\t\tthis.chartInstances.bmiHistory.data.datasets[0].data = newBMIData.map(d => d.bmi);\n\t\t\tthis.chartInstances.bmiHistory.update('none'); // Update without animation for immediate response\n\t\t}\n\t}\n\n\t// Method to add a new data point to charts\n\taddDataPoint(type, value, timestamp = null) {\n\t\tconsole.log('ENNU Dashboard: Adding new data point:', type, value, timestamp);\n\t\t\n\t\tconst now = timestamp ? new Date(timestamp) : new Date();\n\t\tconst uniqueTimestamp = new Date(now.getTime() + Math.random() * 60000); // Add random milliseconds for uniqueness\n\t\t\n\t\tif (type === 'score') {\n\t\t\tif (this.chartInstances.scoreHistory) {\n\t\t\t\tthis.chartInstances.scoreHistory.data.labels.push(uniqueTimestamp);\n\t\t\t\tthis.chartInstances.scoreHistory.data.datasets[0].data.push(value);\n\t\t\t\tthis.chartInstances.scoreHistory.update('active'); // Animate the new point\n\t\t\t}\n\t\t} else if (type === 'bmi') {\n\t\t\tif (this.chartInstances.bmiHistory) {\n\t\t\t\tthis.chartInstances.bmiHistory.data.labels.push(uniqueTimestamp);\n\t\t\t\tthis.chartInstances.bmiHistory.data.datasets[0].data.push(value);\n\t\t\t\tthis.chartInstances.bmiHistory.update('active'); // Animate the new point\n\t\t\t}\n\t\t}\n\t}\n\n\t// Enhanced method for assessment card interactions\n\tinitAssessmentCardInteractions() {\n\t\t\n\t\tconst assessmentCards = this.dashboard.querySelectorAll('.assessment-card');\n\t\t\n\t\tassessmentCards.forEach(card => {\n\t\t\t// Add hover effects\n\t\t\tcard.addEventListener('mouseenter', () => {\n\t\t\t\tcard.style.transform = 'translateY(-4px)';\n\t\t\t});\n\t\t\t\n\t\t\tcard.addEventListener('mouseleave', () => {\n\t\t\t\tcard.style.transform = 'translateY(0)';\n\t\t\t});\n\t\t\t\n\t\t\t// Add click tracking for analytics\n\t\t\tconst actionButtons = card.querySelectorAll('.btn');\n\t\t\tactionButtons.forEach(button => {\n\t\t\t\tbutton.addEventListener('click', (e) => {\n\t\t\t\t\tconst action = button.textContent.trim();\n\t\t\t\t\tconst assessmentTitle = card.querySelector('.assessment-title').textContent;\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\t\n\t\t// Handle collapsible sections for assessment cards\n\t\tthis.dashboard.addEventListener('click', (e) => {\n\t\t\tconst recommendationsBtn = e.target.closest('.btn-recommendations');\n\t\t\tconst breakdownBtn = e.target.closest('.btn-breakdown');\n\t\t\t\n\t\t\tif (recommendationsBtn) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.toggleSection(recommendationsBtn, 'recommendations-section');\n\t\t\t}\n\t\t\t\n\t\t\tif (breakdownBtn) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.toggleSection(breakdownBtn, 'breakdown-section');\n\t\t\t}\n\t\t});\n\t}\n\t\n\ttoggleSection(button, sectionClass) {\n\t\t\n\t\tconst assessmentCard = button.closest('.assessment-card');\n\t\tconst section = assessmentCard.querySelector('.' + sectionClass);\n\t\t\n\t\tif (!section) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t\n\t\t// Toggle button active state\n\t\tbutton.classList.toggle('active');\n\t\t\n\t\t// Check if section is currently expanded\n\t\tconst isExpanded = section.classList.contains('expanded');\n\t\t\n\t\tif (!isExpanded) {\n\t\t\tsection.style.display = 'block';\n\t\t\tsection.classList.remove('hidden');\n\t\t\t\n\t\t\t// Trigger expansion animation\n\t\t\trequestAnimationFrame(() => {\n\t\t\t\tsection.classList.add('expanded');\n\t\t\t});\n\t\t\t\n\t\t\t// Animate progress bars in (if it's a breakdown section)\n\t\t\tif (sectionClass === 'breakdown-section') {\n\t\t\t\tthis.animateProgressBars(section, 'in');\n\t\t\t}\n\t\t} else {\n\t\t\t// Animate progress bars out first (if it's a breakdown section)\n\t\t\tif (sectionClass === 'breakdown-section') {\n\t\t\t\tthis.animateProgressBars(section, 'out');\n\t\t\t\t\n\t\t\t\t// Wait for progress bar animation to complete before collapsing\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsection.classList.remove('expanded');\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tsection.style.display = 'none';\n\t\t\t\t\t\tsection.classList.add('hidden');\n\t\t\t\t\t}, 400); // Match the CSS transition duration\n\t\t\t\t}, 600); // Progress bar animation duration\n\t\t\t} else {\n\t\t\t\t// For non-breakdown sections, collapse immediately\n\t\t\t\tsection.classList.remove('expanded');\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsection.style.display = 'none';\n\t\t\t\t\tsection.classList.add('hidden');\n\t\t\t\t}, 400); // Match the CSS transition duration\n\t\t\t}\n\t\t}\n\t}\n\t\n\tanimateProgressBars(section, direction) {\n\t\tconst progressBars = section.querySelectorAll('.category-score-fill');\n\t\t\n\t\tprogressBars.forEach((bar, index) => {\n\t\t\tconst targetWidth = bar.style.width;\n\t\t\tbar.style.setProperty('--target-width', targetWidth);\n\t\t\t\n\t\t\t// Add delay for staggered animation\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (direction === 'in') {\n\t\t\t\t\tbar.classList.remove('animate-out');\n\t\t\t\t\tbar.classList.add('animate-in');\n\t\t\t\t} else {\n\t\t\t\t\tbar.classList.remove('animate-in');\n\t\t\t\t\tbar.classList.add('animate-out');\n\t\t\t\t}\n\t\t\t}, index * 100); // Stagger each bar by 100ms\n\t\t});\n\t}\n\n\t// Add method for progress bar animation\n\tinitProgressBarAnimation() {\n\t\tconst progressFill = this.dashboard.querySelector('.progress-fill');\n\t\tif (progressFill) {\n\t\t\tconst targetWidth = progressFill.style.width;\n\t\t\tprogressFill.style.width = '0%';\n\t\t\t\n\t\t\tsetTimeout(() => {\n\t\t\t\tprogressFill.style.width = targetWidth;\n\t\t\t}, 1000);\n\t\t}\n\t}\n\n\t// Enhanced initialization\n\tinit() {\n\t\tthis.initDetailsToggle();\n\t\tthis.initContextualText();\n\t\tthis.initScoreAnimation();\n\t\tthis.initPillarAnimation();\n\t\tthis.initHistoricalCharts();\n\t\tthis.initHealthMapAccordion();\n\t\tthis.initToggleAll();\n\t\tthis.initAssessmentCardInteractions();\n\t\tthis.initProgressBarAnimation();\n\t\tthis.initThemeToggle();\n\t\t// Chart refresh is now handled in setupChartRefreshOnTabShow()\n\t}\n\t\n\t// Destroy method to clean up chart instances\n\tdestroy() {\n\t\tconsole.log('ENNU Dashboard: Destroying dashboard instance');\n\t\t\n\t\t// Destroy all chart instances\n\t\tif (this.chartInstances.scoreHistory) {\n\t\t\tthis.chartInstances.scoreHistory.destroy();\n\t\t\tthis.chartInstances.scoreHistory = null;\n\t\t}\n\t\t\n\t\tif (this.chartInstances.bmiHistory) {\n\t\t\tthis.chartInstances.bmiHistory.destroy();\n\t\t\tthis.chartInstances.bmiHistory = null;\n\t\t}\n\t\t\n\t\t// Remove event listeners and clean up\n\t\tthis.dashboard.ennuDashboard = null;\n\t}\n\t\n\t// Method to safely reinitialize charts\n\treinitializeCharts() {\n\t\tconsole.log('ENNU Dashboard: Reinitializing charts...');\n\t\t\n\t\t// Destroy existing charts first\n\t\tif (this.chartInstances.scoreHistory) {\n\t\t\tthis.chartInstances.scoreHistory.destroy();\n\t\t\tthis.chartInstances.scoreHistory = null;\n\t\t}\n\t\t\n\t\tif (this.chartInstances.bmiHistory) {\n\t\t\tthis.chartInstances.bmiHistory.destroy();\n\t\t\tthis.chartInstances.bmiHistory = null;\n\t\t}\n\t\t\n\t\t// Reinitialize charts\n\t\tthis.initScoreHistoryChart();\n\t\tthis.initBMIHistoryChart();\n\t}\n}\n"],"names":["window","ENNUCharts","addScorePoint","value","timestamp","arguments","length","undefined","dashboard","document","querySelector","ennuDashboard","addDataPoint","addBMIPoint","refreshCharts","updateCharts","reinitializeCharts","dashboardInitialized","addEventListener","dashboardEl","destroy","ENNUDashboard","MyStoryTabsManager","style","_createClass","_classCallCheck","this","activeTab","tabContainer","tabLinks","tabContents","init","key","_this","readyState","initialize","querySelectorAll","setupEventListeners","addAccessibilityAttributes","activateFirstTab","forEach","content","classList","remove","display","opacity","transform","link","biomarkersTabId","biomarkersLink","concat","biomarkersContent","add","setTimeout","substring","firstLink","firstTabId","getAttribute","firstContent","_this2","e","preventDefault","targetId","switchToTab","direction","navigateToNextTab","index","setAttribute","contains","tabList","startsWith","targetContent","altContent","activeLink","symptomsLink","Array","from","find","textContent","toLowerCase","includes","triggerTabChangeEvent","updateSymptomsDisplay","currentIndex","findIndex","newIndex","newTab","event","CustomEvent","detail","dispatchEvent","localStorage","setItem","savedTab","getItem","map","totalSymptomsEl","getElementById","activeSymptomsEl","biomarkerCorrelationsEl","trendingSymptomsEl","symptomItems","activeSymptomItems","biomarkerTags","trendingItems","createElement","head","appendChild","dashboardElement","chartInstances","scoreHistory","bmiHistory","_this3","themeToggle","removeItem","setTheme","newTheme","theme","toggleThumb","_this4","toggleAllBtn","accordionItems","allOpen","every","item","header","toggle","button","listItem","closest","detailsContainer","isExpanded","contextualText","mainScoreOrb","insights","updateContextualText","score","parseFloat","insight","targetScore","scoreElement","currentScore","startTime","performance","now","step","elapsed","progress","Math","min","easeOutQuart","pow","toFixed","requestAnimationFrame","orb","Chart","adapters","date","initScoreHistoryChart","initBMIHistoryChart","setupChartRefreshOnTabShow","showChartError","scoreCtx","scoreData","getUserScoreData","chartConfig","type","data","labels","d","Date","datasets","label","borderColor","backgroundColor","borderWidth","fill","tension","pointBackgroundColor","pointBorderColor","pointBorderWidth","pointRadius","pointHoverRadius","options","responsive","maintainAspectRatio","interaction","intersect","mode","scales","x","time","unit","displayFormats","day","week","grid","color","ticks","font","size","y","beginAtZero","max","plugins","legend","tooltip","titleColor","bodyColor","cornerRadius","displayColors","callbacks","title","context","parsed","_scoreData$dataIndex","dataIndex","originalDate","toLocaleDateString","error","showEmptyChartState","bmiCtx","bmiData","getUserBMIData","bmi","_bmiData$dataIndex","_this5","trendsTab","dashboardData","score_history","entry","toISOString","sort","a","b","dataset","_document$querySelect","scoreText","assessmentCards","pointCounter","card","dateElement","dateText","isNaN","getTime","uniqueDate","push","split","i","setDate","getDate","variation","random","isSample","bmi_history","bmiMeasurements","measurement","valueElement","match","amount","parseInt","setHours","getHours","setMinutes","getMinutes","bmiInfoElement","bmiText","canvas","icon","message","wrapper","parentElement","innerHTML","newScoreData","update","newBMIData","uniqueTimestamp","_this6","trim","recommendationsBtn","target","breakdownBtn","toggleSection","sectionClass","section","animateProgressBars","bar","targetWidth","width","setProperty","progressFill","initDetailsToggle","initContextualText","initScoreAnimation","initPillarAnimation","initHistoricalCharts","initHealthMapAccordion","initToggleAll","initAssessmentCardInteractions","initProgressBarAnimation","initThemeToggle"],"sourceRoot":""}