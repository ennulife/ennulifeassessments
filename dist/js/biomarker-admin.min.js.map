{"version":3,"file":"js/biomarker-admin.min.js","mappings":"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","sources":["webpack://ennulife-assessments/./assets/js/biomarker-admin.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\n    \n    const navTabs = document.querySelectorAll('.nav-tab');\n    navTabs.forEach(function(tab) {\n        tab.addEventListener('click', function(e) {\n            e.preventDefault();\n            const target = this.getAttribute('href');\n            \n            navTabs.forEach(t => t.classList.remove('nav-tab-active'));\n            this.classList.add('nav-tab-active');\n            \n            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));\n            const targetElement = document.querySelector(target);\n            if (targetElement) {\n                targetElement.classList.add('active');\n            }\n        });\n    });\n    \n    const importMethodInputs = document.querySelectorAll('input[name=\"import_method\"]');\n    importMethodInputs.forEach(function(input) {\n        input.addEventListener('change', function() {\n            const csvUploadRow = document.querySelector('.csv-upload-row');\n            const manualEntrySection = document.querySelector('.manual-entry-section');\n            \n            if (this.value === 'csv') {\n                if (csvUploadRow) csvUploadRow.style.display = 'block';\n                if (manualEntrySection) manualEntrySection.style.display = 'none';\n            } else {\n                if (csvUploadRow) csvUploadRow.style.display = 'none';\n                if (manualEntrySection) manualEntrySection.style.display = 'block';\n            }\n        });\n    });\n    \n    const addBiomarkerBtn = document.getElementById('add-biomarker-entry');\n    if (addBiomarkerBtn) {\n        addBiomarkerBtn.addEventListener('click', function() {\n            const template = document.querySelector('.biomarker-entry');\n            if (template) {\n                const clone = template.cloneNode(true);\n                clone.querySelectorAll('input, select').forEach(input => input.value = '');\n                const container = document.getElementById('biomarker-entries');\n                if (container) {\n                    container.appendChild(clone);\n                }\n            }\n        });\n    }\n    \n    document.addEventListener('click', function(e) {\n        if (e.target.classList.contains('remove-biomarker-entry')) {\n            const entries = document.querySelectorAll('.biomarker-entry');\n            if (entries.length > 1) {\n                const entry = e.target.closest('.biomarker-entry');\n                if (entry) {\n                    entry.remove();\n                }\n            }\n        }\n    });\n    \n    const labImportForm = document.getElementById('ennu-lab-import-form');\n    if (labImportForm) {\n        labImportForm.addEventListener('submit', function(e) {\n            e.preventDefault();\n            \n            const formData = new FormData(this);\n            formData.append('action', 'ennu_import_lab_data');\n            formData.append('nonce', ennuBiomarkerAdmin.nonce);\n            \n            const submitBtn = this.querySelector('input[type=\"submit\"]');\n            const originalText = submitBtn.value;\n            submitBtn.value = 'Importing...';\n            submitBtn.disabled = true;\n            \n            fetch(ennuBiomarkerAdmin.ajaxurl, {\n                method: 'POST',\n                body: formData\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    showMessage('success', data.data.message);\n                    if (data.data.errors && data.data.errors.length > 0) {\n                        showMessage('error', 'Some errors occurred: ' + data.data.errors.join(', '));\n                    }\n                } else {\n                    showMessage('error', data.data.message || 'Import failed');\n                }\n            })\n            .catch(() => {\n                showMessage('error', 'Network error occurred');\n            })\n            .finally(() => {\n                submitBtn.value = originalText;\n                submitBtn.disabled = false;\n            });\n        });\n    }\n    \n    const targetsUserSelect = document.getElementById('targets-user-select');\n    if (targetsUserSelect) {\n        targetsUserSelect.addEventListener('change', function() {\n            const userId = this.value;\n            const doctorTargetsSection = document.getElementById('doctor-targets-section');\n            \n            if (userId) {\n                loadUserBiomarkers(userId);\n                if (doctorTargetsSection) {\n                    doctorTargetsSection.style.display = 'block';\n                }\n            } else {\n                if (doctorTargetsSection) {\n                    doctorTargetsSection.style.display = 'none';\n                }\n            }\n        });\n    }\n    \n    const doctorTargetsForm = document.getElementById('ennu-doctor-targets-form');\n    if (doctorTargetsForm) {\n        doctorTargetsForm.addEventListener('submit', function(e) {\n            e.preventDefault();\n            \n            const formData = new FormData(this);\n            formData.append('action', 'ennu_save_doctor_targets');\n            formData.append('nonce', ennuBiomarkerAdmin.nonce);\n            \n            const submitBtn = this.querySelector('input[type=\"submit\"]');\n            const originalText = submitBtn.value;\n            submitBtn.value = 'Saving...';\n            submitBtn.disabled = true;\n            \n            fetch(ennuBiomarkerAdmin.ajaxurl, {\n                method: 'POST',\n                body: formData\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                    showMessage('success', data.data.message);\n                } else {\n                    showMessage('error', data.data.message || 'Save failed');\n                }\n            })\n            .catch(() => {\n                showMessage('error', 'Network error occurred');\n            })\n            .finally(() => {\n                submitBtn.value = originalText;\n                submitBtn.disabled = false;\n            });\n        });\n    }\n    \n    function loadUserBiomarkers(userId) {\n        const targetsContainer = document.getElementById('targets-container');\n        if (targetsContainer) {\n            targetsContainer.innerHTML = '<div class=\"loading-spinner\"></div>';\n        }\n        \n        const formData = new FormData();\n        formData.append('action', 'ennu_get_user_biomarkers');\n        formData.append('user_id', userId);\n        formData.append('nonce', ennuBiomarkerAdmin.nonce);\n        \n        fetch(ennuBiomarkerAdmin.ajaxurl, {\n            method: 'POST',\n            body: formData\n        })\n        .then(response => response.json())\n        .then(data => {\n            if (data.success) {\n                renderTargetsForm(data.data.biomarkers, data.data.targets);\n            } else {\n                if (targetsContainer) {\n                    targetsContainer.innerHTML = '<p>Error loading biomarkers</p>';\n                }\n            }\n        })\n        .catch(() => {\n            if (targetsContainer) {\n                targetsContainer.innerHTML = '<p>Network error occurred</p>';\n            }\n        });\n    }\n    \n    function renderTargetsForm(biomarkers, existingTargets) {\n        let html = '';\n        \n        if (biomarkers && Object.keys(biomarkers).length > 0) {\n            for (const biomarker in biomarkers) {\n                const data = biomarkers[biomarker];\n                const currentTarget = existingTargets[biomarker] || '';\n                \n                html += '<div class=\"target-input-group\">';\n                html += '<label>' + (data.name || biomarker.replace(/_/g, ' ')) + ' (' + (data.unit || '') + ')</label>';\n                html += '<input type=\"number\" step=\"0.01\" name=\"targets[' + biomarker + ']\" value=\"' + currentTarget + '\" placeholder=\"Target value\">';\n                html += '<span class=\"current-value\">Current: ' + (data.value || 'N/A') + '</span>';\n                html += '</div>';\n            }\n        } else {\n            html = '<p>No biomarker data found for this user. Import lab data first.</p>';\n        }\n        \n        const targetsContainer = document.getElementById('targets-container');\n        if (targetsContainer) {\n            targetsContainer.innerHTML = html;\n        }\n    }\n    \n    function showMessage(type, message) {\n        const messageClass = type === 'success' ? 'success-message' : 'error-message';\n        const messageHtml = '<div class=\"' + messageClass + '\">' + message + '</div>';\n        \n        const wrap = document.querySelector('.wrap');\n        if (wrap) {\n            wrap.insertAdjacentHTML('afterbegin', messageHtml);\n            \n            setTimeout(function() {\n                const messageElement = document.querySelector('.' + messageClass);\n                if (messageElement) {\n                    messageElement.style.opacity = '0';\n                    messageElement.style.transition = 'opacity 0.3s';\n                    setTimeout(() => messageElement.remove(), 300);\n                }\n            }, 5000);\n        }\n    }\n});\n"],"names":["document","addEventListener","navTabs","querySelectorAll","forEach","tab","e","preventDefault","target","this","getAttribute","t","classList","remove","add","content","targetElement","querySelector","input","csvUploadRow","manualEntrySection","value","style","display","addBiomarkerBtn","getElementById","template","clone","cloneNode","container","appendChild","contains","length","entry","closest","labImportForm","formData","FormData","append","ennuBiomarkerAdmin","nonce","submitBtn","originalText","disabled","fetch","ajaxurl","method","body","then","response","json","data","success","showMessage","message","errors","join","targetsUserSelect","userId","doctorTargetsSection","targetsContainer","innerHTML","biomarkers","existingTargets","html","Object","keys","biomarker","currentTarget","name","replace","unit","renderTargetsForm","targets","loadUserBiomarkers","doctorTargetsForm","type","messageClass","messageHtml","wrap","insertAdjacentHTML","setTimeout","messageElement","opacity","transition"],"sourceRoot":""}